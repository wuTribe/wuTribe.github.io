<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>编程式事务+aop</title>
    <link href="/2023/11/15/Spring/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1+aop/"/>
    <url>/2023/11/15/Spring/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1+aop/</url>
    
    <content type="html"><![CDATA[<h1 id="涉及知识点链接"><a href="#涉及知识点链接" class="headerlink" title="涉及知识点链接"></a>涉及知识点链接</h1><p><a href="https://blog.csdn.net/yanwenwennihao/article/details/126540981">Spring事务注解</a>（隔离级别中的解释是错误的）</p><p><a href="https://blog.csdn.net/qq_40991313/article/details/126339270">【Java笔记+踩坑】Spring基础3——AOP，事务管理</a>（基本相当于视频的文字版和跟操版，对于已经知道的知识点会有点啰嗦，可以只看小结）</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于游戏采用滚服的方式，所以有多个数据库，在配置礼包时，需要全服配置，如果发生异常，需要进行数据回滚，由于存在多个数据源，无法使用 Spring 提供的事务注解，需要自定义实现</p><p>项目使用原生的 JdbcTemplate 方式，所以可以通过 JdbcTemplate 拿到 DataSource 进行事务操作</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="声明注解"><a href="#声明注解" class="headerlink" title="声明注解"></a>声明注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.manager.biz.aop.data;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * game 事务注解，默认解析第一个参数作为事务源（jdbcTemplate）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTransactional &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定义AOP"><a href="#定义AOP" class="headerlink" title="定义AOP"></a>定义AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.manager.biz.aop;<br><br><span class="hljs-keyword">import</span> com.manager.biz.bean.CustomerException;<br><span class="hljs-keyword">import</span> com.manager.biz.bean.WebErrorCode;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionStatus;<br><span class="hljs-keyword">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by wuyufan on 2023/11/15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTransactionalAop</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MyTransactionalAop.class);<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.manager.biz.aop.data.MyTransactional)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;cut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 获取方法参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span> (args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_服务器参数为空);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || obj.getClass() != JdbcTemplate.class) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_服务器参数为空);<br>        &#125;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> (JdbcTemplate) obj;<br><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> jdbcTemplate.getDataSource();<br>        <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_数据源不存在);<br>        &#125;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dstm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>        <span class="hljs-comment">// TransactionStatus不能再提交或回滚时在生成，这样会导致事物失效</span><br>        <span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> dstm.getTransaction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTransactionDefinition</span>());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行</span><br>            result = joinPoint.proceed(args);<br>            <span class="hljs-comment">// 提交事物</span><br>            dstm.commit(status);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-comment">// 回滚事物</span><br>            log.error(<span class="hljs-string">&quot;回滚事务，异常&quot;</span> + e.getCause());<br>            dstm.rollback(status);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyTransactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">xxx</span><span class="hljs-params">(JdbcTemplate jdbcTemplate, Object... objs)</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-4-438.找到字符串中所有字母异位词</title>
    <link href="/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-4-438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-4-438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-3-49.字母异位词分组</title>
    <link href="/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-3-49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <url>/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-3-49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></p><p>直接看官方的第二种解法就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; strs.length; ++i) &#123;<br>            <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strs[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; str.length(); ++j) &#123;<br>                ++arr[str.charAt(j) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] != <span class="hljs-number">0</span>) &#123;<br>                    sb.append((<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;a&#x27;</span> + j)).append(arr[j]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> sb.toString();<br>            List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>            list.add(str);<br>            map.put(key, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(map.values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-2-383.赎金信</title>
    <link href="/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-2-383.%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
    <url>/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-2-383.%E8%B5%8E%E9%87%91%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/ransom-note/">力扣题目链接</a></p><p>和上道题一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canConstruct</span><span class="hljs-params">(String ransomNote, String magazine)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ransomNote.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ransomNote.charAt(i);<br>            map.put(c, map.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; magazine.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> magazine.charAt(i);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> map.get(c);<br>            <span class="hljs-keyword">if</span> (cc == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 提供的不需要</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            --cc;<br>            <span class="hljs-keyword">if</span> (cc == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 足够</span><br>                map.remove(c);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cc &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 还需要</span><br>                map.put(c, cc);<br>            &#125;<br>            <span class="hljs-comment">// 多余提供，不管</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> map.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-1-242.有效的字母异位词</title>
    <link href="/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-1-242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-1-242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接</a></p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>使用内置 map 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            map.put(c, map.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> t.charAt(i);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> map.getOrDefault(c, <span class="hljs-number">0</span>) - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cc != <span class="hljs-number">0</span>) &#123;<br>                map.put(c, cc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.remove(c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看题目上，可以使用数组实现，ASCII 编码上最长 26，所以可以使用数组实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            ++arr[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); ++i) &#123;<br>            --arr[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-我的BTC历程</title>
    <link href="/2023/11/10/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/1-%E6%88%91%E7%9A%84BTC%E5%8E%86%E7%A8%8B/"/>
    <url>/2023/11/10/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/1-%E6%88%91%E7%9A%84BTC%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>从2021年5月开始接触的吧，下面事情发生的顺序有点忘了，按照印象随便聊聊吧</p><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>我第一次听到是显卡价格暴涨，忘记大几了，懵懵懂懂。当时同学 A 从十四楼匆忙跑下来找同学 B，说显卡涨了快一倍，就挂咸鱼，很快就有人线下把他买走了，用了好几年还能涨价卖，赚爆了。那时候比特币大概是六万？反正快到第一次顶了。</p><hr><p>不知道过了多久，奇亚币（chia）抄的挺火的，概念是用硬盘挖矿，也就导致硬盘价格暴涨，国内大硬盘缺货，只有亚马逊上有，但是运过来需要时间。此时同学 B 和同学 C 在讨论，要不要凑钱从亚马逊上直接买几个硬盘，期间找商家直接卖出去，按照现在的价格稳赚几百，他们看到我说：“老吴要不要来，亏的算 B 的“，我想着这种好事，直接干啊！</p><p>我们三个建了群，扯点有的没的，因为我对这个不了解，但是大多都是他们在说话，我听他们说。</p><hr><p>计划顺利进行，N 天后，几百块的收益就到手了。随后好像硬盘的价格一路下跌。某天，看到他的支付宝余额十万，怀疑我数错了，又数了两遍，确实十万</p><blockquote><p>还没毕业就达到我毕业一两年的水平，确实厉害，信息获取也比我迅速</p></blockquote><p>这个时期给我的感觉是，他们怎么知道的这些信息，也许B站，也许外网的几个 up，也许其他渠道，我都不得而知，他们只是说，我也是听说的，不了了之，并没有完整的认知链条，也就暂告一段落了</p><h1 id="第一次触碰"><a href="#第一次触碰" class="headerlink" title="第一次触碰"></a>第一次触碰</h1><p>再后来，doge，pig，shib 火了，涨幅惊人，同学 C 又过来和 B 扯，此时我好奇的问哪里买，不知道从哪里了解到火币网，根据自己摸索找到了入门投资方式，果然韭菜入门还是简单的。同学 B 让我注意风险，我说没事，就两百，我有红线。</p><p>其实就是初生牛犊不怕虎，这个时候的我连基金都玩不明白，股票都没碰过，直接摸数字货币，还加上了五倍合约，合约的规则都没明白，虽然说没事，但是心里还是很害怕的，怕一下子亏没</p><hr><p>投资一开始，还是有点收益的，三个点，五个点，卖了，来钱之快，大大出乎我的意料，买…..卖…..买…..卖，但是每次都是蚂蚁仓，总是在想一次暴富岂不是很爽。</p><p>随后发生 519，比特币暴跌，腰斩到三万，其实这是个很好进入的机会，但是害怕继续往下跌，全都没了。如果按照现在的知识来看，极速下跌，极速插针，反而要胆大进入，因为不可能直接到达目标位置。在下跌的过程中，因为我的仓位很小很小，所以并没有造成过多的亏损，后续的反弹也并不清楚大概的理论反弹点位，也就贯彻了这个心理。</p><hr><p>后面不知道什么时候，同学 B 把我踢了，有点生气，因为群里就三个人，不至于，最多不说话就行了。</p><hr><p>反弹结束，比特币这时候发生第一次大跌，影响情绪，退出了</p><p>这个阶段说不上亏损，也说不上收益，但是也就几十块钱的波动，导致我一直看收益，半个小时内看好几次，非常影响其他事情。不得不感叹金钱的魔力</p><h1 id="第二次触碰"><a href="#第二次触碰" class="headerlink" title="第二次触碰"></a>第二次触碰</h1><p>再后面开始实习了，比特币又开始上涨，也就有了念头</p><p>不知道怎么的了解到了其他平台 okex，在官方群认识了富婆 F，也加了几个人，一起组建了一个群，他们侃侃而谈，炫耀收益、炫耀资源、骂庄家，总体给我的感觉听风就是雨，反而影响我的情绪，不过里面有两个看起来有点东西的人  D 和 E，D 是信息面分析，而且有点小钱，E 是技术面，我也会跟着他们两个下单，分析相对比较准确。问他们怎么做到的，回复：“直觉”，也是，这种事情就算知道也不能和别人说</p><p>之前就有听说过杀猪群的案例，一直对他们保持警惕。后来 D 和 E 在群里说 GM 币，说怎么怎么牛逼怎么怎么厉害，群里挺多人跟了，全部都被活埋。而我因为谨慎又一次幸免，期间被嘲笑，又灌输什么概念，有一次有点动摇的说实话。</p><p>再后面比特币又大跌，基金大跌，纳斯达克指数大跌，打击情绪，也就懒得看了，群也退了。</p><p>为了避免更大的亏损，也去学习了一些交易相关的知识，均线、双均线、RSI、MACD、蜡烛图、支撑阻力位、移动止损止盈、仓位管理、顺势交易等等，确实学到了挺多，能看懂了一些，但是没有非常系统的知识系统，也不知道怎么把这些知识融入到实战之中，更多靠感觉，并且很久才有一次行情，更多要靠回测，挺磨人心态的，有时候感觉对了也不太敢下单，这个阶段大概持续到我实习结束。总的来说不怎么亏也不怎么赚，也不知道哪些做法是对的</p><h1 id="第三次触碰"><a href="#第三次触碰" class="headerlink" title="第三次触碰"></a>第三次触碰</h1><p>我一直在想，如果有自动交易，根据某种规则执行策略，丢一点小钱进去运行，没问题的话再丢大前就好了。恰巧此时，币安推出了跟单交易员。一开始用这个功能还挺不错的，一开始可以赚到 1k - 2k。在持续两周的运行以及部分指标的考究下，确认安全没问题，就开始投入更多的资金，最高达到了七千。</p><p>之后行情发生日线级别的回调，所有运行策略都发生大规模的亏损，无论等比还是等额跟单，都接连爆仓，七千尽数亏损</p><p>内心并没有很大波动，我就把大多数软件卸载了，失败退出。</p><p>在前几次的触碰中，导致这种原因都是同一个，对交易市场的认知还不够明确，也可以说长进不大。包括入场出场时机、出入场理由、止盈止损、仓位、心态，都没有一套自己的方法论。期间虽然有看书，但是并没有应用于实战，并且书只是走马观花，当然也和不合适的入门阶段有关，同时也没有相关人带领等原因的综合影响，导致了这次结果。</p><p>期间虽然加过一个群，给我讲过叠 buff 的方法论，但是仅限于使用，和浅显认知。也问过他们学习的方式，看书，看书，还是看书</p><h1 id="第四次触碰"><a href="#第四次触碰" class="headerlink" title="第四次触碰"></a>第四次触碰</h1><p>但是追求是不上班，通过网络，要么售卖服务、要么售卖知识、要么股票交易、要么自媒体等等</p><p>BTC 交易是我其中的一个尝试，这次需要为系统的知识付费，付时间，以更加稳健的方式</p><p>现在，我又投了一百，五倍杠杆</p><hr><p>就这样吧，随便写写，也不讲顺序和逻辑了</p>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟货币</tag>
      
      <tag>交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-7-142.环形链表II</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-7-142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-7-142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p><h1 id="思路-实现"><a href="#思路-实现" class="headerlink" title="思路&amp;实现"></a>思路&amp;实现</h1><p>和链表相交的思路类似</p><h2 id="暂存地址"><a href="#暂存地址" class="headerlink" title="暂存地址"></a>暂存地址</h2><p>这里暂存使用哈希表的 set 实现，一旦出现同一个地址，就是说明有环，并且是入环口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        HashSet&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(cur)) &#123;<br>                <span class="hljs-keyword">return</span> cur;<br>            &#125; <br>            set.add(cur);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="这是一个数学题"><a href="#这是一个数学题" class="headerlink" title="这是一个数学题"></a>这是一个数学题</h2><p><a href="https://www.bilibili.com/video/BV1if4y1d7ob/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【把环形链表讲清楚！ 如何判断环形链表？如何找到环形链表的入口？ LeetCode：142.环形链表II】 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (slow.next != <span class="hljs-literal">null</span> <br>                &amp;&amp; fast.next != <span class="hljs-literal">null</span> <br>                &amp;&amp; fast.next.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> slow;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-keyword">while</span> (a != b) &#123;<br>                    a = a.next;<br>                    b = b.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> a;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-6-面试题_02.07.链表相交</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-6-%E9%9D%A2%E8%AF%95%E9%A2%98_02.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-6-%E9%9D%A2%E8%AF%95%E9%A2%98_02.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>两种方法：</p><ol><li>把 A 链表地址存下，再遍历 B 链表逐个比较，相同就返回。代码简单就不写了</li><li>双指针，双遍历。这里需要分类讨论<ul><li>如果相交<ul><li>假设两个链表分别为 a,b<br>a.length &#x3D; a1 + a2<br>b.length &#x3D; b1 + b2<br>当 a b 在 c 处相交时，a2 &#x3D;&#x3D; b2，即<br>a.length &#x3D; a1 + c<br>b.length &#x3D; b1 + c<br>当 a 遍历完走 b，b 遍历完走 a，他们的长度为<br>a：a1 + c + b1 + c<br>b：b1 + c + a1 + c<br>如果 a1 &#x3D;&#x3D; b1，第一个 c 就相遇<br>如果 a1 !&#x3D; b1，第二个 c 相遇<br>所以，当他们走完对方的独立长度时，就是二者相交点</li></ul></li><li>如果不相交<ul><li>遍历两次都找不到公共点</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpA</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpB</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tmpA == tmpB) &#123;<br>                <span class="hljs-keyword">return</span> tmpA;<br>            &#125;<br>            tmpA = tmpA.next;<br>            tmpB = tmpB.next;<br>            <span class="hljs-keyword">if</span> (tmpB == <span class="hljs-literal">null</span>) &#123;<br>                tmpB = headA;<br>                ++n;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (tmpA == <span class="hljs-literal">null</span>) &#123;<br>                tmpA = headB;<br>                ++n;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题目给我的感觉，优化方案更像是数学题，能想到就很简单，想不到就死活做不出来</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-5-19.删除链表的倒数第N个节点</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-5-19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-5-19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></p><p>直接看官方第三种解题方式即可</p><p>官方一共有三种方法：</p><ol><li>先计算出总数，而后再次遍历到所需要删除的节点，代码简单，懒得写了</li><li>遍历时放入栈，而后依次弹出即可，也简单，不写</li><li>快慢指针方式，快指针先走 n 格，而后快慢指针同时走</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        newHead.next = head;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            tmp = tmp.next;<br>            --n;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (tmp.next != <span class="hljs-literal">null</span>) &#123;<br>            cur = cur.next;<br>            tmp = tmp.next;<br>        &#125;<br>        cur.next = cur.next.next;<br>        <span class="hljs-keyword">return</span> newHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-4-24.两两交换链表中的节点</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-4-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-4-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">力扣题目链接</a></p><p>题目的思想和反转链表类似</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里也可以用递归方式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        newHead.next = head;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> cur.next;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a.next;<br>            a.next = b.next;<br>            b.next = a;<br>            cur.next = b;<br>            cur = cur.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-3-206.反转链表</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-3-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-3-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/reverse-linked-list/">力扣题目链接</a></p><p><a href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">翻转链表</a></p><h1 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h1><p>题目解释有问题，应该用三个指针</p><p>pre    cur    next</p><p>由于 cur.next 转向 pre，原本 next 数值丢失，需要暂存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 循环方式</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 递归方式    </span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-literal">null</span>, head);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode pre, ListNode cur)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> pre;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        <span class="hljs-keyword">return</span> reverse(cur, tmp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-2-707.设计链表</title>
    <link href="/2023/11/08/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-2-707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/11/08/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-2-707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html#%E6%80%9D%E8%B7%AF">代码随想录-涉及链表</a></p><p><a href="https://leetcode.cn/problems/design-linked-list/">力扣题目链接</a></p><p>直接看官方最优答案的解释：前后加两个哨兵节点，size 可以加快处理速度</p><p>需要注意的是索引下标从 0 开始</p><ul><li>新增插入到 index &#x3D; n 的前面</li><li>新增的边界处理：0 &gt; index || index &gt; size  无意义</li><li>删除&amp;查询的边界处理：0 &lt;&#x3D; index &lt; size</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-keyword">private</span> Node head; <span class="hljs-comment">// 头节点</span><br>    <span class="hljs-keyword">private</span> Node tail; <span class="hljs-comment">// 尾节点，初始化/增/删 都需要考虑尾指针</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// 大小，从 1 开始，注意索引从 0 开始</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> Node pre;<br>        <span class="hljs-keyword">public</span> Node next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> val;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>        head.next = tail;<br>        tail.pre = head;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        prin(<span class="hljs-string">&quot;get&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!check(index)) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp.val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>        tmp.next.pre = newNode;<br>        newNode.next = tmp.next;<br>        tmp.next = newNode;<br>        newNode.pre = tmp;<br>        ++size;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!check(index)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        tmp.next.next.pre = tmp;<br>        tmp.next = tmp.next.next;<br>        --size;<br>    &#125;<br><br>    <span class="hljs-comment">// 是否合法区域</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prin</span><span class="hljs-params">(String addr)</span> &#123;<br>        System.out.println(addr + <span class="hljs-string">&quot; ============  -- size = &quot;</span> + size);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head; tmp != <span class="hljs-literal">null</span>; tmp = tmp.next) &#123;<br>            System.out.println(index + <span class="hljs-string">&quot; +++&gt; &quot;</span>+ tmp.val);<br>            ++index;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> tail; tmp != <span class="hljs-literal">null</span>; tmp = tmp.pre) &#123;<br>            System.out.println(index + <span class="hljs-string">&quot; ---&gt; &quot;</span>+ tmp.val);<br>            ++index2;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj.get(index);</span><br><span class="hljs-comment"> * obj.addAtHead(val);</span><br><span class="hljs-comment"> * obj.addAtTail(val);</span><br><span class="hljs-comment"> * obj.addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj.deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-1-203.移除链表元素</title>
    <link href="/2023/11/03/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-1-203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <url>/2023/11/03/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-1-203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">力扣题目链接</a></p><p><a href="https://www.bilibili.com/video/BV18B4y1s7R9">链表基础操作| LeetCode：203.移除链表元素 (opens new window)</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>注意删除指针的时候不需要移动 next 节点就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> h;<br>        <span class="hljs-keyword">while</span> (tmp.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tmp.next.val == val) &#123;<br>                tmp.next = tmp.next.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp = tmp.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> h.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组总结</title>
    <link href="/2023/11/03/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/03/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h1><p>数组在底层中是顺序存储，只需要存起始地址和每个空间的长度即可计算目标值，所以查找快。</p><p>但是对于数据的删除需要逐个覆盖，删除 index &#x3D; n 的位置，[n+1, length) 的区间都要往前移动一次，所以删除慢</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>对于数组中查找元素，可以考虑先排序，再利用二分查找 O(logn) 级别的。</p><blockquote><p>注意 O(logn) 在数量比较少时，速度比 O(n^2^) 要慢，所以并不是前者一定好</p></blockquote><h1 id="题解算法"><a href="#题解算法" class="headerlink" title="题解算法"></a>题解算法</h1><h2 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h2><p>在进行二分查找时，可以利用两个指针 ab，分别指向左右边界，每次逐步缩减。同时，还可利用二分找数值、边界等等，在处理边界的过程中还可进行其他操作。</p><p>有时候可以从后往前遍历更简单</p><ul><li>多层循环也可看成多级指针。</li><li>左右边界</li><li>快慢指针</li><li>滑动窗口</li></ul><p>在处理的过程中要注意边界条件的处理，当一开始的区间确定了，后面的边界也就随之确定。在螺旋矩阵中，特别容易出错。</p><p>滑动窗口可以看成是一类题型的模板，<strong>找到满足xxx区间的最x的区间（子串，子区间，子数组）</strong>，直接套就好</p><p>期间解决了一道困难题，实际这种题并不困难，只是需要处理的细节、边界条件、代码熟练度有一点点要求，所以容易出错，需要花费一点时间调试，同时由于没有代码提示，所以对代码熟练度，常用方法会有一点考验</p><p>同时，工作中的项目也需要考虑挺多细节，在做题的过程中也有体现出来，可以作为工作中的过渡</p><p>题目还要刷多两三遍，会记得更深刻一些</p><p>叭叭叭叭叭叭叭叭……先到这</p><hr><p>在写题解的过程中，尤其是滑动窗口，发现几乎完全套用的方式，也没有任何理由或原理，下面引用一下知乎的回答（为什么滑动窗口是正确的？）</p><p>总结：先有题目，再有方法，然后出现题目的变式，方法的变式。从答案问为什么答案是对的，这个问题本身就不对</p><blockquote><p>我想了好一会儿想不出该怎么回答这个问题，总感觉怪怪的，然后终于意识到其实你这个提问本身就很微妙。</p><p>滑动窗口算法只是一种算<em>法</em>。一种“方法”。它指导你以某种思路做事。它没有对错可言。</p><p>而任何一个具体的题目，是否适用滑动窗口算法，那是另一码事。</p><p>举个例子，我给出一个叫做“求助旁边的人”的方法，你能脱离要解决的问题去聊这个“方法”的对错吗？</p><p>对于一些问题，滑动窗口算法适用，于是适用滑动窗口算法求解正确。</p><p>对于另一些问题，滑动窗口算法就会不适用，或者至少需要一些额外改进、只用滑动窗口算法自然就会遗漏掉一些情况。</p><p>滑动窗口算法所能解决的最经典的问题，你大概在了解这个词的时候就已经一并知道了。比如定长连续最大和问题。但是那个问题我觉得正常情况下都不会觉得“有遗漏”的。毕竟原理超级简单，而且题目对于算法基本就是“量身定做”的，完全没有反直觉要素，这问题交给没有编程基础的人去做人工枚举基本也是这么个做法。</p><p>而你所疑惑的很可能就是需要变体&#x2F;改进型&#x2F;多维的滑动窗口算法的东西了……但这要给你解释它为什么是正确的（或者换个说法，为什么是适用的），我起码得知道题目是什么（摊手）。</p><p>作者：虚境<br>链接：<a href="https://www.zhihu.com/question/601659082/answer/3033665122">https://www.zhihu.com/question/601659082/answer/3033665122</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>1-数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-4-2-54.螺旋矩阵</title>
    <link href="/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-2-54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-2-54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>和上一道题差不多，注意各个边界处理</p><p>x1…….x2</p><p>……………</p><p>y1……..y2</p><p>但是这里需要调整一下</p><ul><li>上边界处理 x1   x2</li><li>右边界处理   y2</li><li>下边界不处理</li><li>左边界处理   y1</li></ul><p>同时要考虑只有一行或一列的情况，如果分开处理就复杂了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">spiralOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        List&lt;Integer&gt; rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">// 以最小的边界作为循环条件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastX</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length - t - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastY</span> <span class="hljs-operator">=</span> matrix.length - t - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (t &lt;= lastX &amp;&amp; t &lt;= lastY) &#123;<br>            <span class="hljs-comment">// 上边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> t; i &lt;= lastX; ++i) &#123; <span class="hljs-comment">// 增加临界情况处理，[x,y]</span><br>                rs.add(matrix[t][i]);<br>            &#125;<br>            <span class="hljs-comment">// 右边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> t + <span class="hljs-number">1</span>; j &lt;= lastY; ++j) &#123; <span class="hljs-comment">// 增加临界情况处理 (y,x)</span><br>                rs.add(matrix[j][lastX]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t &lt; lastX &amp;&amp; t &lt; lastY) &#123; <span class="hljs-comment">// 处理只有一行或一列的情况</span><br>                <span class="hljs-comment">// 下边界</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lastX - <span class="hljs-number">1</span>; i &gt; t; --i) &#123; <span class="hljs-comment">// 去除临界情况处理 [x,y)</span><br>                    rs.add(matrix[lastY][i]);<br>                &#125;<br>                <span class="hljs-comment">// 左边界</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> lastY; j &gt; t; --j) &#123; <span class="hljs-comment">// [y,x)</span><br>                    rs.add(matrix[j][t]);<br>                &#125;<br>            &#125;<br>            ++t;<br>            --lastX;<br>            --lastY;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>4-螺旋矩阵</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-4-1-59.螺旋矩阵</title>
    <link href="/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-1-59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-1-59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">59.螺旋矩阵II</a></p><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣题目链接</a></p><p><a href="https://www.bilibili.com/video/BV1SL4y1N7mV">拿下螺旋矩阵！LeetCode：59.螺旋矩阵II</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>转圈圈，注意每个边界条件统一，方便处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[][] rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前计算次数</span><br>        <span class="hljs-comment">// 循环次数：每次循环处理两个边界，所以 n / 2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mid; i++) &#123;<br>            <span class="hljs-comment">// 边界处理，包左不包右</span><br>            <span class="hljs-comment">// i:近端边界，last远端边界</span><br>            <span class="hljs-comment">// ii j 各自计算的边界，为了方便识别，ii 表示横坐标计算，j 表示纵坐标计算</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> n - i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 上边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> + i; j &lt; last; j++) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[i][j] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 右边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> + i; ii &lt; last; ii++) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[ii][last] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 下边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> last; j &gt; i; j--) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[last][j] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 左边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> last; ii &gt; i; ii--) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[ii][i] = cur;<br>                ++cur;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            rs[mid][mid] = cur;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>4-螺旋矩阵</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-3-76.最小覆盖子串</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-3-76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-3-76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></p><p><a href="https://www.bilibili.com/video/BV1Zd4y117AT/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【LeetCode 76｜最小覆盖子串｜滑动窗口｜双指针｜经典困难题快来挑战呀】 </a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>还是套用滑动窗口的模板，但是多了字符记录的map，收缩扩容的记录条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 所需要的字符统计</span><br>    HashMap&lt;Integer, Integer&gt; ori = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 实际出现的字符统计</span><br>    HashMap&lt;Integer, Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansL</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span> - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 统计字符出现个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> t.charAt(i);<br>            ori.put(c, ori.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (r &lt; s.length()) &#123;<br>            <span class="hljs-comment">// 移动右窗口添加元素，统计</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(r);<br>            <span class="hljs-keyword">if</span> (ori.containsKey(c)) &#123;<br>                cnt.put(c, cnt.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 检查是否满足题目要求，如果满足，记录结果，移除记录窗口中的元素，移动左窗口调整</span><br>            <span class="hljs-keyword">while</span> (check()) &#123;<br>                <span class="hljs-keyword">if</span> ((ansR - ansL) &gt; (r - l)) &#123;<br>                    ansL = l;<br>                    ansR = r;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> s.charAt(l);<br>                <span class="hljs-keyword">if</span> (ori.containsKey(cc)) &#123;<br>                    cnt.put(cc, cnt.get(cc) - <span class="hljs-number">1</span>);<br>                &#125;<br>                ++l;<br>            &#125;<br>            ++r;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ansL == -<span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : s.substring(ansL, ansR+<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断进入窗口的字符是否大于等于所需的字符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iter</span> <span class="hljs-operator">=</span> ori.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) iter.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) entry.getKey();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) entry.getValue();<br>            <span class="hljs-comment">// 存在，一个所需字符大于统计字符，跳出</span><br>            <span class="hljs-keyword">if</span> (cnt.getOrDefault(key, <span class="hljs-number">0</span>) &lt; value) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码还有优化的地方，扩容的时候顺便记录关键字符的对应下标，收缩的时候直接根据下标直接收缩</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-2-904.水果成篮</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-2-904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-2-904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://www.bilibili.com/video/BV1hG4y1n7xt/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【力扣（LeetCode） 每日一题 904. 水果成篮   2022-10-17  双指针算法】 </a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>窗口右移加入元素，不满足题目条件时调整左窗口至满足条件，记录长度，直到链表末尾，返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalFruit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] fruits)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (r &lt; fruits.length) &#123;<br>            <span class="hljs-comment">// 添加元素</span><br>            map.put(fruits[r], map.getOrDefault(fruits[r], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 元素不满足条件，调整至符合条件</span><br>            <span class="hljs-keyword">while</span> (map.size() &gt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">di</span> <span class="hljs-operator">=</span> map.get(fruits[l]) - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (di == <span class="hljs-number">0</span>) &#123;<br>                    map.remove(fruits[l]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    map.put(fruits[l], di);<br>                &#125;<br>                ++l;<br>            &#125;<br>            <span class="hljs-comment">// 满足条件，记录大小</span><br>            ans = Math.max(ans, (r - l + <span class="hljs-number">1</span>));<br>            ++r;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-1-209.长度最小的子数组</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-1-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-1-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">解读</a></p><p><a href="https://www.bilibili.com/video/BV1tZ4y1q7XE/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【拿下滑动窗口！ | LeetCode 209 长度最小的子数组】 </a></p><h1 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h1><p>最多走 2n 次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span>;<br>        <span class="hljs-keyword">while</span> (r &lt; nums.length) &#123;<br>            sum += nums[r];<br>            <span class="hljs-comment">// 当累计总和大于目标值。压缩左区间</span><br>            <span class="hljs-keyword">while</span> (sum &gt;= target) &#123;<br>                sum -= nums[l];<br>                rs = Math.min(rs, (r - l + <span class="hljs-number">1</span>));<br>                l++;<br>            &#125;<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-number">0x7fffffff</span> ? <span class="hljs-number">0</span> : rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-5-977.有序数组的平方</title>
    <link href="/2023/10/30/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-5-977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <url>/2023/10/30/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-5-977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>题解看官方</p><p>思路：新建一个目标容器存结果，pos 指针从头往后插入。原来的数组可以看成抛物线，双指针分别从两边往中间靠近</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> r;<br><br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rr</span> <span class="hljs-operator">=</span> nums[r] * nums[r];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ll</span> <span class="hljs-operator">=</span> nums[l] * nums[l];<br>            <span class="hljs-keyword">if</span> (rr &gt; ll) &#123;<br>                ans[pos] = rr;<br>                r--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans[pos] = ll;<br>                l++;<br>            &#125; <br>            --pos;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-4-844.比较含退格的字符串</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-4-844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-4-844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></li><li><a href="https://www.bilibili.com/video/BV1954y1Q7dX/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a"> 【Leetcode刷题 844. 比较含退格的字符串 Backspace String Compare】 </a></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backspaceCompare</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> s.length() - <span class="hljs-number">1</span>, ti = t.length() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, tb = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (si &gt;= <span class="hljs-number">0</span> || ti &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 遍历两个字符串</span><br>            <span class="hljs-keyword">while</span> (si &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 先从后往前遍历 s</span><br>                <span class="hljs-keyword">if</span> (s.charAt(si) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123; <span class="hljs-comment">// 遇到 # 累加计数器，同时移动指针</span><br>                    sb++;<br>                    si--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (sb &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 计数器不为0，继续往前移动指针，相当于被删除</span><br>                        si--;<br>                        sb--;<br>                    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 当前字符存在</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (ti &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 再从后往前遍历 t，其他逻辑一样</span><br>                <span class="hljs-keyword">if</span> (t.charAt(ti) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                    tb++;<br>                    ti--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (tb &gt; <span class="hljs-number">0</span>) &#123;<br>                        ti--;<br>                        tb--;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 遍历存在的最后的字符</span><br>            <span class="hljs-keyword">if</span>(si &gt;= <span class="hljs-number">0</span> &amp;&amp; ti &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(si) != t.charAt(ti)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (si &gt;= <span class="hljs-number">0</span> || ti &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            si--;<br>            ti--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-3-283.移动零</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-3-283.%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-3-283.%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></p><h1 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h1><p>快指针遍历，当遇到不是 0 的元素时，快指针给慢指针赋值，同时移动慢指针。每次遍历都移动快指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[f] != <span class="hljs-number">0</span>) &#123;<br>                nums[s++] = nums[f];<br>            &#125;<br>            f++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (s &lt; nums.length) &#123;<br>            nums[s++] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-2-26.删除有序数组中的重复项</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-2-26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-2-26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></li></ul><h1 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h1><p>遍历数组，如果快指针和慢指针指向的数字相等，则不断移动快指针，直到二者不相等，然后慢指针往后移动一步，将快指针指向的值赋值给慢指针，重复这个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[s] == nums[f]) &#123;<br>                f++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                nums[++s] = nums[f];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-1-27.移除元素</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-1-27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-1-27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://www.bilibili.com/video/BV12A4y1Z7LP/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【数组中移除元素并不容易！ | LeetCode：27. 移除元素】</a></li><li><a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#_27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0">移除元素</a></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>数组的删除元素。实际数组不能删除元素，只能覆盖</li><li>可使用暴力破解的方式，双循环，第一层找到需要删除的元素，第二层循环就开始覆盖</li><li>或者使用快慢指针，快指针遍历，慢指针负责覆盖</li></ul><h1 id="代码实现-双指针"><a href="#代码实现-双指针" class="headerlink" title="代码实现-双指针"></a>代码实现-双指针</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-comment">// 快指针遍历，如果不是需要删除的元素，直接覆盖给慢指针</span><br>            <span class="hljs-keyword">if</span> (nums[f] != val) &#123;<br>                nums[l++] = nums[f];<br>            &#125;<br>            f++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-5-367. 有效的完全平方数</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-5-367.%20%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-5-367.%20%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://leetcode.cn/problems/valid-perfect-square/submissions/">题目连接</a></li><li><a href="https://www.bilibili.com/video/BV1pp4y1W7eZ/?p=2&share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【【专题讲解】详细剖析二分查找 leetcode 33 81 367 Search in Rotated Sorted Array】</a></li></ul><h1 id="使用静态变量提前定义"><a href="#使用静态变量提前定义" class="headerlink" title="使用静态变量提前定义"></a>使用静态变量提前定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50000</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> i * i;<br>            <span class="hljs-keyword">if</span> (ii &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 溢出</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            set.add(ii);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.contains(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以把 set 打印出来，容器大小也就 46340，如果使用二分法的话，由于输入的数据最大二十一亿，右边界最多 46340</p><p>同样的注意，m * m 溢出问题</p><h1 id="使用二分搜索"><a href="#使用二分搜索" class="headerlink" title="使用二分搜索"></a>使用二分搜索</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">46340</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> m * m;<br>            <span class="hljs-keyword">if</span> (ret &gt;  num) &#123;<br>                r = m - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; num) &#123;<br>                l = m + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-4-69.x的平方根</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-4-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-4-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://leetcode.cn/problems/sqrtx/description/">题目连接</a></li><li><a href="https://www.bilibili.com/video/BV1WW411C7YN/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【花花酱 LeetCode 69 Sqrt(x) - 刷题找工作 EP158】</a></li></ul><h1 id="思路-注意"><a href="#思路-注意" class="headerlink" title="思路 &amp; 注意"></a>思路 &amp; 注意</h1><ul><li>利用二分查找</li><li>注意 int 类型溢出</li><li>最终查找出来的边界必定在 left 和 right 之间，直接取值</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> x;<br><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (middle &gt; x / middle) &#123;<br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (middle &lt; x / middle) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-3-34.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-3-34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-3-34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://programmercarl.com/0035.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html#%E6%80%9D%E8%B7%AF">搜索插入位置</a><ul><li>利用二分法找到左右边界</li></ul></li><li><a href="https://www.bilibili.com/video/BV1wy4y1k76F/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">程序员面试经典题，二分搜索一个区间，区间查找 (LeetCode 34)</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;searchL(nums, target), searchR(nums, target)&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找左边界</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchL</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 相等并且符合起始边界，返回</span><br>                <span class="hljs-keyword">if</span> (middle == <span class="hljs-number">0</span> || (nums[middle - <span class="hljs-number">1</span>] != target)) &#123;<br>                    <span class="hljs-keyword">return</span> middle;<br>                &#125;<br>                right = middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找右边界</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchR</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(middle);<br>                <span class="hljs-comment">// 相等并且符合起始边界，返回</span><br>                <span class="hljs-keyword">if</span> ((middle == nums.length - <span class="hljs-number">1</span>) || (nums[middle + <span class="hljs-number">1</span>] &gt; target)) &#123;<br>                    <span class="hljs-keyword">return</span> middle;<br>                &#125;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-2-35.搜索插入位置</title>
    <link href="/2023/10/28/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-2-35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2023/10/28/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-2-35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><p><a href="https://programmercarl.com/0035.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html#%E6%80%9D%E8%B7%AF">搜索插入位置</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] == target) &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-1-704.二分查找</title>
    <link href="/2023/10/27/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-1-704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/10/27/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-1-704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录-二分查找</a></p><p><a href="https://www.bilibili.com/video/BV1fA4y1o715/">讲解视频</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>区间判断：根据区间定义后面的判断逻辑，区间定义常见的有两个<ul><li>左闭右开区间（常见的包左不包右）</li><li>左闭右闭区间</li></ul></li><li>int 类型溢出<ul><li>在进行右侧左右边界计算时，如果数组长度超过 11亿，相加会溢出</li></ul></li><li>查找前提，数组有序 &amp;&amp; 元素唯一<ul><li>元素唯一可以做变式，比如区间的边界查找</li></ul></li></ul><h1 id="左闭右开实现"><a href="#左闭右开实现" class="headerlink" title="左闭右开实现"></a>左闭右开实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length; <span class="hljs-comment">// 闭区间，右侧无意义</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] == target) &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="左闭右闭实现"><a href="#左闭右闭实现" class="headerlink" title="左闭右闭实现"></a>左闭右闭实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// 必须是有效区间</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;  <span class="hljs-comment">// [1, 1] 区间有意义</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 计算右侧的两个边界容易溢出</span><br>            <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+Fluid博客搭建</title>
    <link href="/2023/10/27/%E5%8D%9A%E5%AE%A2/0-hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/10/27/%E5%8D%9A%E5%AE%A2/0-hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="网站框架"><a href="#网站框架" class="headerlink" title="网站框架"></a>网站框架</h2><p>hexo 是网站框架，可以不用一行代码就构建出自己的个人网站，可以记录文章，因此可作为博客，同样的还有 wordpress。</p><p>WordPress没用过因此给不了具体评价，仅根据网上查询，是需要一个服务器的，相对来说自由，但是需要处理域名，服务器之类的东西，相对麻烦，有时间捣鼓就好了。hexo可直接部署到 GitHub 或者 gitee上，不用服务器，完全免费，也不用花费太多精力</p><p><a href="https://hexo.io/zh-cn/">hexo官网</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>hexo 和 WordPress 一样支持多个主题，在官网很明显的位置，点进去找到自己喜欢的</p><p><a href="https://hexo.io/themes/">hexo主题</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="网站框架-1"><a href="#网站框架-1" class="headerlink" title="网站框架"></a>网站框架</h2><p>根据官网文档一步一步看下去就好了，注意 node 和 npm 版本</p><blockquote><p>这里注意原本的项目所需的 node 版本和 hexo 所需的 node 版本是否一致，谨慎升级两者，否则会出现某个项目跑不起来</p><p>这里可以使用 nvm 对 node 多版本管理，项目的 node 版本可以看 npm或者node-sass的，在package.json里</p></blockquote><h2 id="主题-1"><a href="#主题-1" class="headerlink" title="主题"></a>主题</h2><p>根据相关的步骤直接装就好了，大部分都不会有问题，这里本博客采用的是 <a href="https://hexo.fluid-dev.com/docs/">hexo fluid</a></p><blockquote><p>在之前本来想用 next，很简洁，但是在根据某某文章的安装过程中，出现了网站访问人数无法确定，没有首页等问题，经过百度查询后并没有解决，只能更换主题，后找到了 fluid，仅需下载，简单配置就可直接使用，非常省事</p></blockquote><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>待续……</p><h1 id="相对路径图片测试"><a href="#相对路径图片测试" class="headerlink" title="相对路径图片测试"></a>相对路径图片测试</h1><p>![截屏2023-10-29 14.02.29](images&#x2F;0-hexo-博客搭建.assets&#x2F;截屏2023-10-29 14.02.29.png)</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>example</title>
    <link href="/2023/10/27/%E5%8D%9A%E5%AE%A2/hexo-Front-matter/"/>
    <url>/2023/10/27/%E5%8D%9A%E5%AE%A2/hexo-Front-matter/</url>
    
    <content type="html"><![CDATA[<p>Hexo官网对于<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>的描述</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: example<br>category:<br><span class="hljs-bullet"> -</span> [算法, tttt]<br><span class="hljs-bullet"> -</span> [Java]<br><span class="hljs-bullet"> -</span> [Java2]<br>date: 2023-10-27 15:45:47<br>tags:<br><span class="hljs-bullet"> -</span> [test1, test3]<br><span class="hljs-bullet"> -</span> test2<br>description: 文章描述语法测试<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
