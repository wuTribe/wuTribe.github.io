<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>541.反转字符串2</title>
    <link href="/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/2-541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B21/"/>
    <url>/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/2-541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B21/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-string-ii/">力扣题目链接</a></p><p>通俗一点说，每隔k个反转k个，末尾不够k个时全部反转；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">char</span>[] cArr = s.toCharArray();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i += (<span class="hljs-number">2</span> * k)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> i + k;<br>            <span class="hljs-keyword">if</span> (r &gt; s.length()) &#123;<br>                r = s.length();<br>            &#125;<br>            reverseStr(i, r, cArr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cArr);<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">char</span>[] cArr)</span> &#123;<br>        <span class="hljs-comment">// 左闭右开</span><br>        --r;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            cArr[l] ^= cArr[r];<br>            cArr[r] ^= cArr[l];<br>            cArr[l] ^= cArr[r];<br>            l++;<br>            r--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>4-字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>替换数字</title>
    <link href="/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/3-%E6%9B%BF%E6%8D%A2%E6%95%B0%E5%AD%97/"/>
    <url>/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/3-%E6%9B%BF%E6%8D%A2%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-string-ii/"><a href="https://kamacoder.com/problempage.php?pid=1064">卡码网题目链接</a></a></p><p>他内部的算法系统</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sc.nextLine();<br>        <span class="hljs-type">char</span>[] arr = s.toCharArray();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; arr[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                sb.append(<span class="hljs-string">&quot;number&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(arr[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(sb);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>4-字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>334.反转字符串</title>
    <link href="/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/1-334-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/12/31/%E7%AE%97%E6%B3%95/4-%E5%AD%97%E7%AC%A6%E4%B8%B2/1-334-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> s.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            s[left] ^= s[right];<br>            s[right] ^= s[left];<br>            s[left] ^= s[right];<br>            ++left;<br>            --right;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>4-字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能训练</title>
    <link href="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/"/>
    <url>/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>【【功能训练系列】开篇!什么是功能训练，为什么要开发身体功能】 <a href="https://www.bilibili.com/video/BV1eG4y1Q7cT/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1eG4y1Q7cT/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>【【功能训练系列②】 28个核心训练技能包！从零基础到进阶！收藏向！】 <a href="https://www.bilibili.com/video/BV1xY411S747/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1xY411S747/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>【【功能训练系列③】25个技能包！别让胸椎肩胛成为你进步的绊脚石！！！】 <a href="https://www.bilibili.com/video/BV1qv4y1t7BE/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1qv4y1t7BE/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>【【功能性训练系列④】练完了等于换了个髋关节！蹲拉弹跳暴涨！20个技能包！】 <a href="https://www.bilibili.com/video/BV1pY411e7Kb/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1pY411e7Kb/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>【【功能性训练系列⑤】给你的膝盖做个大保养吧！】 <a href="https://www.bilibili.com/video/BV1Bo4y1Y7Fi/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1Bo4y1Y7Fi/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>【【功能性训练⑥】告别崴脚的11个技能包！！】 <a href="https://www.bilibili.com/video/BV1E84y1K7k7/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1E84y1K7k7/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>为了让训练和日常中工作更稳定，更不容易受伤。具体位置可以看视频评论区定位</p><p>如果本身有体态问题，可以考虑使用弹力带放大错误，让身体反方向自然发力纠正</p><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p><img src="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/image-20231228143918148.png" alt="image-20231228143918148"></p><h1 id="胸椎-肩胛-肩关节"><a href="#胸椎-肩胛-肩关节" class="headerlink" title="胸椎 &amp; 肩胛 &amp; 肩关节"></a>胸椎 &amp; 肩胛 &amp; 肩关节</h1><p>胸椎功能：屈伸，旋转。如果胸椎灵活度不好，可能需要腰椎代偿</p><p>胸椎 肩关节 涉及灵活性和稳定性</p><p><img src="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/image-20231228144630226.png" alt="image-20231228144630226"></p><h1 id="髋"><a href="#髋" class="headerlink" title="髋"></a>髋</h1><p>前十五分钟有关节活动度筛查</p><ul><li>后侧链紧张度测试：FMS直腿上抬     06:29<ul><li>脸朝上平躺，手放两侧贴紧地面，双腿靠拢，双腿脚尖朝上微勾，然后拿个毛巾或者木棍垫在一侧腘窝下面，目的是让他这条腿始终贴紧毛巾或木棍不要让他抬起来，另一侧腿缓慢抬起，直到下侧腿有明显晃动，此时定住进行测量，拿根木棍从抬起腿的踝关节向下延伸测量，木棍在膝盖以上大腿中点以下为 2 分，在膝盖以下 1 分，大腿中点以上 3 分。</li></ul></li><li>前侧链紧张度测试：改良托马斯测试     10:47<ul><li>屁股坐在凳子上，使劲将右腿紧抱胸前，再顺势躺下，大腿和小腿是一个自然弯曲角度证明股直肌不很紧张（反之就是紧张）；但是大腿下侧跟凳面有个明显悬空，侧说明他髂腰肌紧张（反之不紧张）</li></ul></li><li>髋内外旋功能测试：90-90    13:10<ul><li>摆好姿势后，脊柱正直，臀部紧贴地面为髋部活动度好</li></ul></li></ul><p><img src="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/image-20231229102629612.png" alt="image-20231229102629612"></p><h1 id="膝盖"><a href="#膝盖" class="headerlink" title="膝盖"></a>膝盖</h1><p><img src="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/image-20231229135842820.png" alt="image-20231229135842820"></p><h1 id="脚踝"><a href="#脚踝" class="headerlink" title="脚踝"></a>脚踝</h1><p><img src="/2023/12/28/%E5%81%A5%E8%BA%AB/3-%E5%8A%9F%E8%83%BD%E8%AE%AD%E7%BB%83/image-20231229161212156.png" alt="image-20231229161212156"></p><h1 id="补充：颈椎"><a href="#补充：颈椎" class="headerlink" title="补充：颈椎"></a>补充：颈椎</h1><p>麦肯基方案，训练时间 20min</p><p><strong>重要！！！这个一定要慢</strong></p><ul><li>6 min 只需要坐着</li><li>14 min 需要躺着完成</li></ul><p>【拯救你的颈椎！世界公认的颈肩康复动作——麦肯基疗法保姆级完整跟练版！（收藏练习）全程演示，易学易会！】 <a href="https://www.bilibili.com/video/BV1YN411F7RP/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1YN411F7RP/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><h1 id="安排"><a href="#安排" class="headerlink" title="安排"></a>安排</h1><h2 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h2><p>功能训练假如一天完成的话，需要时间   一个动作合并 1.5 min，如果是单边需要 * 2，则时长范围 (4.5<del>9min) * 5 &#x3D; 22.5</del>45 min。颈椎方案则需要 20min，整体 1h。</p><p>个人觉得时间太长，我会做拆分</p><h2 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h2><p>根据自己的身体情况，以自己为例，我颈椎生理曲度变直，所以每天都需要练习颈椎，而功能训练可以拆分上下身。即</p><ol><li>核心 + （胸椎 &amp; 肩胛 &amp; 肩关节）+ 麦肯基方案：(4.5~9min) * 2 + 20 &#x3D; 29 ~ 38 min</li><li>髋 + 膝盖 + 脚踝 + 麦肯基方案：(4.5~9min) * 3 + 20 &#x3D; 33.5 ~ 47 min</li></ol><p>这种方式如果放假在家还是比较可行的，但是工作日没有成片的时间，继续优化</p><h2 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h2><p>功能训练如果只需要自重，或者方便携带的工具的话，中午吃完饭就可以做了，这个要看具体动作，肯定有三五个动作可以的。需要瑜伽球等转到家里，需要哑铃等重工具分配到健身房，前一天需要做第二天的规划。</p>]]></content>
    
    
    <categories>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部落冲突发展思路以及相关链接</title>
    <link href="/2023/12/26/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/4-%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%E5%8F%91%E5%B1%95%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/"/>
    <url>/2023/12/26/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/4-%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%E5%8F%91%E5%B1%95%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-数据"><a href="#安装-数据" class="headerlink" title="安装 &amp; 数据"></a>安装 &amp; 数据</h1><p>近期 coc 更新了十六本，增加了英雄装备感觉挺有意思的，又下载回来玩，英雄培养成本应该是更大了</p><p>升级数据以及各个包下载：</p><p><a href="https://clashpost.com/apk">https://clashpost.com/apk</a></p><blockquote><p>登录问题：登录需要使用 Gmail 邮箱接收验证码，秒到，QQ 邮箱从来没收到过，所以需要梯子</p><p>新版数据可以参考一下这个：<a href="https://coc.heiyu100.cn/shuju.aspx">https://coc.heiyu100.cn/shuju.aspx</a></p></blockquote><h1 id="英雄升级以及装备"><a href="#英雄升级以及装备" class="headerlink" title="英雄升级以及装备"></a>英雄升级以及装备</h1><h2 id="王等级方面"><a href="#王等级方面" class="headerlink" title="王等级方面"></a>王等级方面</h2><p>王的升级数据应该是弱化了，还是要升的</p><ul><li>女王，蛮王，飞盾一直躺就好了</li><li>永王 55 级后打算都用书秒，此前躺王，所有书都用在上面，一个月可以升 7-8 级，当前 26，需要四个月</li></ul><h2 id="矿石方面"><a href="#矿石方面" class="headerlink" title="矿石方面"></a>矿石方面</h2><p>升级所需资源可以从下面的视频得到</p><p>【矿石收集和装备升级计算工具，超好用！【部落冲突】】 <a href="https://www.bilibili.com/video/BV1di4y1a7TD/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">https://www.bilibili.com/video/BV1di4y1a7TD/?share_source=copy_web&amp;vd_source=577501e0685d20f8a8f1561cac87ce0a</a></p><p>鉴于女王 &amp; 永王可能还会推出史诗装备，并且在无法参与部落战的情况下，活动兑换优先黄矿，只需要牢记 480 满级史诗，抛弃传说品质</p><p>矿石可以先屯着，等别人实测哪个更好用再升</p><p>通过每日之星拿满蓝紫矿，要升杯</p><p>其实部落战也可以考虑打的，有种黑三的恐惧感，可以加快一点矿石的获取进度</p><h1 id="六农-资源-墙-辅助"><a href="#六农-资源-墙-辅助" class="headerlink" title="六农 &amp; 资源 &amp; 墙 &amp; 辅助"></a>六农 &amp; 资源 &amp; 墙 &amp; 辅助</h1><p>爱玩辅助：<a href="http://awcoc.com/%EF%BC%8C%E8%BF%98%E6%98%AF%E9%82%A3%E4%B8%AA%E8%A7%82%E7%82%B9%EF%BC%8C%E8%BE%85%E5%8A%A9%E4%B8%8D%E6%98%AF%E6%8C%82%EF%BC%8C%E6%89%BE%E4%B8%80%E4%B8%AA%E6%89%93%E5%B7%A5%E4%BA%BA%E8%80%8C%E5%B7%B2">http://awcoc.com/，还是那个观点，辅助不是挂，找一个打工人而已</a></p><p>现在主世界夜世界资源都可以使用辅助刷，升级完成前两天刷满就好了</p><p>城墙的话，考虑之后必定降价，所以把所有建筑满级或者搞活动降价的时候再开脚本刷</p><p>六农现在条件降低了，两个王一起升，资源不缺，45级总和，当前还差 9，还需要一个月</p><p>夜世界的墙和主世界一样</p><h1 id="药水-活动"><a href="#药水-活动" class="headerlink" title="药水 &amp; 活动"></a>药水 &amp; 活动</h1><ul><li>活动特殊技能优先就不用考虑了，竞赛、突袭什么的，都归属于活动</li><li>资源和资源药水都不用兑换了</li><li>皮肤等满级再换，而已后面出的肯定比前面好</li><li>等级药水（王、宠物、超级兵、兵种）都不用换，屯着，活动送多了换钻石</li><li>换升级之星药水，主要拿矿石</li><li>主世界加速可换可不换，本来王升级时间就长，主要兵种升满王都不一定慢。</li><li>夜世界药水在六农之前可以换，六农之后不换了</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>永王 55 级后用王书直接秒，其他情况一直躺</li><li>主世界五工人，三个躺王，两个升主要建筑。注意资源消耗</li><li>兑换上只换胜利之星，加速看剩余量，多余就换</li><li>矿石先放着，快溢出了再考虑</li><li>升杯数到传奇，中间尽量不要下线，否则成本过高，卡传奇</li><li>最最最最最后或者搞活动在升墙</li></ol>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>体态评估和纠正</title>
    <link href="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/"/>
    <url>/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://www.bilibili.com/video/BV1nz4y1E7aS/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【什么是后表线？想学习筋膜链的赶紧看过来！】 </a></p><p>to do list</p><ul><li><input disabled type="checkbox"> 豹式健身</li><li><input disabled type="checkbox"> 力量训练原理</li><li><input disabled type="checkbox"> 解剖列车</li></ul><h1 id="豹式健身"><a href="#豹式健身" class="headerlink" title="豹式健身"></a>豹式健身</h1><p>英文第2版序言：由于所有的概念、动作和活动性练习都是相互关联的，也许你在读完本书很久之后才有机会成功地运用其中的方法。</p><p>第一部分包含了这一系统的核心理论、基本宗旨和应用方法。第二、三部分中的动作和活动性练习要求你具备特定的知识和基本的运动技能才能实施，如果你直接跳过第一部分，就难以充分体会到这一系统带来的益处。如果你不去纠正引发疼痛的动作或姿势错误，就永远无法彻底消除疼痛和运动功能异常</p><p>第二个问题是，人体的构造是为了生存而设计的。你的中枢神经系统控制着你整个身体的知觉信号和运动信号的传递。疼痛信号和运动信号在脑干中遵循相同的传递路径是有其原因的。如果你砸痛了手指，你做的第一件事就是挪开它。为什么？因为你不可能同时接收到疼痛信号和运动信号。这个精巧的系统让人们能够运动和生存，因为它准确地将恼人的疼痛信号下调为微小的背景噪声。在你停止运动前，你察觉不到疼痛信号。换言之，运动信号（感觉输入）会覆盖疼痛信号，以便人体可以持续运动和训练。难怪当你躺下睡觉的时候，你的肩膀才会开始抽痛，因为此时你的大脑不再接收任何运动信号的输入，而开始全面接收疼痛信号。</p><p>将训练作为诊断工具</p><p>你要记住，人的动作是复杂而微妙的。将诊断过程与训练过程融为一体能确保每一个错误都被揪出来。但是，你无法在单次训练中顾及每一个动作，也不必在一天之内诊断出每一处不足并进行处理。发现问题，解决问题，而后通过尝试更多具有挑战性的动作来暴露出你运动能力中更多的不足，这个过程将持续一生，我们也将由此成为更棒的运动员。</p><p>健身房就是实验室，找出自己的身体缺陷（施加压力、紧张度等变量，使其暴露出来）并修正</p><p>而后，将这些实验室中学到的技能用于日常生活与工作中，如，在健身房中学的脊柱中立位能够保护自己，那么在日常行走、站立、坐下时，需要保持这种状态，其他技能也是</p><h2 id="脊柱中立"><a href="#脊柱中立" class="headerlink" title="脊柱中立"></a>脊柱中立</h2><h1 id="解剖列车"><a href="#解剖列车" class="headerlink" title="解剖列车"></a>解剖列车</h1><h2 id="后表线（SBL）"><a href="#后表线（SBL）" class="headerlink" title="后表线（SBL）"></a>后表线（SBL）</h2><p>后表线（SBL），人体后侧纵向筋膜链，从足底开始沿着身体后侧延伸到额头</p><p>脚底五指 — 足跟 — 跟腱 — 小腿三头肌 — 腘绳肌 — 骶结节韧带 —  腰骶部筋膜 — 竖脊肌 — 头颈神肌 — 后头脊 — 颅顶筋膜 — …. — 额骨眉弓</p><blockquote><p>从这里可以看出，体态问题可能会通过后表线，进而影响面部</p></blockquote><p>在学习和理解筋膜链的时候，需要超越传统的”肌肉孤立理论“，将不同的肌肉和结缔组织看成一个整体，在治疗和运动中，需要考虑整体性对身体的影响</p><p>后表线根据膝盖分成两部分</p><ol><li>脚趾到膝盖</li><li>膝盖到额头</li></ol><p>只有当膝盖伸直时，后表线才是连续完整的筋膜链，才能有效的传递力量</p><p>在发育过程中，由于后表线的发育，才让我们从胎儿的屈曲转为伸直状态</p><h2 id="后表线的姿势代偿"><a href="#后表线的姿势代偿" class="headerlink" title="后表线的姿势代偿"></a>后表线的姿势代偿</h2><p>后表线是协调矢状面的姿势和动作的路线</p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129173701952.png" alt="image-20231129173701952"></p><p>提供向下的稳定力，所以运动功能是产生升直（限制身体前屈）或者过度伸直的动作（伸懒腰）</p><p>从下至上，足底开始</p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129174006683.png" alt="image-20231129174006683"></p><p>后表线短缩或拉紧足弓，形成高足弓，而后经过足跟。足跟可能会长期经受很大的拉力，导致骨膜拉离骨面，形成跟骨骨刺</p><blockquote><p>跟骨骨刺并不是真的是刺，而是比较钝的骨头，原因是骨细胞会填满骨头和骨膜之间的缝隙。骨刺只有当成长到触碰感觉神经时，才会疼痛，更多情况是对韧带的组织摩擦，导致发炎、感染</p></blockquote><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129174204938.png" alt="image-20231129174204938"></p><p>而后经过足踝，短缩会导致踝背屈受限（勾脚背动作被限制）</p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129174753491.png" alt="image-20231129174753491"></p><p>而后是膝关节，张力过高时，膝关节被牵拉，可能导致膝关节过度伸直形成膝超伸</p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129174933839.png" alt="image-20231129174933839"></p><p>而后经过骨盆、脊柱、头部，短缩时可能导致骨盆前移、前倾、腰椎过度前凸、胸椎后凸、头前引</p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/image-20231129175041913.png" alt="image-20231129175041913"></p><p>在调整体态问题，不能只关注局部</p><h2 id="前表线"><a href="#前表线" class="headerlink" title="前表线"></a>前表线</h2><p>前侧，从足背开始</p><p>待续…… 后面看书再说，知识太零散</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://www.zhihu.com/question/364466428">我的健身房教练给我开的体态表这个可信吗？ - 知乎</a></p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/Snipaste_2023-11-23_16-37-27.jpg" alt="Snipaste_2023-11-23_16-37-27"></p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/Snipaste_2023-11-23_16-37-19.jpg" alt="Snipaste_2023-11-23_16-37-19"></p><p><img src="/2023/11/29/%E5%81%A5%E8%BA%AB/2-%E4%BD%93%E6%80%81%E8%AF%84%E4%BC%B0%E5%92%8C%E7%BA%A0%E6%AD%A3/Snipaste_2023-11-23_16-37-03.jpg" alt="Snipaste_2023-11-23_16-37-03"></p>]]></content>
    
    
    <categories>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试常见问题总结</title>
    <link href="/2023/11/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98-%E9%A2%98%E7%9B%AE%E7%89%88/"/>
    <url>/2023/11/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98-%E9%A2%98%E7%9B%AE%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p><a href="https://wx.zsxq.com/dweb2/index/group/48418884588288">来自： JavaGuide&amp;Java面试交流圈</a></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a><strong>Java</strong></h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a><strong>基础</strong></h3><ol><li>Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？</li><li>String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</li><li>String s1 &#x3D; new String(“abc”);这段代码创建了几个字符串对象？</li><li>&#x3D;&#x3D; 与 equals?hashCode 与 equals ?</li><li>包装类型的缓存机制了解么？</li><li>自动装箱与拆箱了解吗？原理是什么？</li><li>深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</li><li>谈谈对 Java 注解的理解，解决了什么问题？</li><li>Exception 和 Error 有什么区别？</li><li>Java 反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？</li><li>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</li><li>内部类了解吗？匿名内部类了解吗？</li><li>BIO,NIO,AIO 有什么区别?</li></ol><p>参考答案：<a href="https://javaguide.cn/java/basis/java-basic-questions-01.html">Java 基础常见面试题总结</a></p><h3 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a><strong>Java 集合框架</strong></h3><ol><li>说说 List,Set,Map 三者的区别？三者底层的数据结构？</li><li>有哪些集合是线程不安全的？怎么解决呢？</li><li>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</li><li>HashMap 和 Hashtable 的区别？HashMap 和 HashSet 区别？HashMap 和 TreeMap 区别？</li><li>HashMap 的底层实现</li><li>HashMap 的长度为什么是 2 的幂次方</li><li>ConcurrentHashMap 和 Hashtable 的区别？</li><li>ConcurrentHashMap 线程安全的具体实现方式&#x2F;底层具体实现</li></ol><p>参考答案：<a href="https://javaguide.cn/java/collection/java-collection-questions-01.html">Java 集合常见面试题总结</a></p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><strong>JVM</strong></h3><ol><li>JVM 内存结构</li><li>JVM 调优参数</li><li>什么是类加载？何时类加载？类加载流程？</li><li>知道哪些类加载器。类加载器之间的关系？</li><li>类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？…）。</li><li>为什么需要双亲委派</li><li>Java 内存模型</li><li>栈中存放什么数据，堆中呢？</li><li>大对象放在哪个内存区域</li><li>堆区如何分类</li><li>垃圾回收有哪些算法</li><li>GC 的全流程</li><li>GC 中老年代用什么回收方法？</li></ol><p>参考答案：</p><ol><li><a href="https://javaguide.cn/java/jvm/memory-area.html">Java 内存区域详解（重点）</a></li><li><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html">JVM 垃圾回收详解（重点）</a></li><li><a href="https://javaguide.cn/java/jvm/class-file-structure.html">类文件结构详解</a></li><li><a href="https://javaguide.cn/java/jvm/class-loading-process.html">类加载过程详解</a></li><li><a href="https://javaguide.cn/java/jvm/classloader.html">类加载器详解（重点）</a></li></ol><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><strong>多线程</strong></h3><ol><li>线程和进程的区别。</li><li>什么是上下文切换?</li><li>什么是线程死锁?如何避免死锁?</li><li>乐观锁和悲观锁了解么？</li><li>说说 sleep() 方法和 wait() 方法区别和共同点?</li><li>Java 线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？新线程添加的流程?</li><li>实现 Runnable 接口和 Callable 接口的区别。</li><li>讲一下 JMM(Java 内存模型)。volatile 关键字解决了什么问题？说说 synchronized 关键字和 volatile 关键字的区别。</li><li>AQS 原理了解么？AQS 组件有哪些？</li><li>用过 CountDownLatch 么？什么场景下用的？</li></ol><p>参考答案：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html">Java 并发常见面试题总结</a></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h3><p><strong>基础</strong> ：</p><ol><li>非关系型数据库和关系型数据库的区别？</li><li>事务的四大特性了解么?</li><li>MySQL 事务隔离级别？默认是什么级别？</li><li>乐观锁与悲观锁的区别?</li><li>MySQL 数据库两种存储引擎的区别?</li></ol><p><strong>索引</strong> ：</p><ol><li>为什么索引能提高查询速度?</li><li>聚集索引和非聚集索引的区别？非聚集索引一定回表查询吗?</li><li>索引这么多优点，为什么不对表中的每一个列创建一个索引呢？(使用索引一定能提高查询性能吗?)</li><li>索引底层的数据结构了解么？Hash 索引和 B+树索引优劣分析</li><li>B+树做索引比红黑树好在哪里？</li><li>最左前缀匹配原则了解么？</li><li>什么是覆盖索引</li></ol><p><strong>进阶</strong> ：</p><ol><li>一条 SQL 语句在 MySQL 中如何执行的？</li><li><strong>explain 命令了解么？</strong></li><li>简单说一下 SQL 调优思路。</li><li>简单说一下大表优化的思路。</li><li>分库分表了解么？为什么要分库分表？有哪些常见的分库分表工具(sharding-jdbc、TSharding、MyCAT…)？</li></ol><p>参考答案：</p><ol><li><a href="https://javaguide.cn/database/mysql/mysql-questions-01.html">MySQ 常见面试题总结</a></li><li><a href="https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html">读写分离和分库分表详解</a></li></ol><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h3><ol><li>分布式缓存常见的技术选型方案有哪些？说一下 Redis 和 Memcached 的区别和共同点</li><li>说一下有缓存情况下查询数据和修改数据的流程。</li><li>Redis 有哪些数据结构？SDS 了解么？</li><li>Redis 内存满了怎么办？</li><li>Redis 内存淘汰算法除了 LRU 还有哪些？</li><li>Redis 给缓存数据设置过期时间有啥用？ Redis 是如何判断数据是否过期的呢？</li><li>Redis 事务了解么？(Redis 可以通过 <strong>MULTI，EXEC，DISCARD 和 WATCH</strong> 等命令来实现事务功能)</li><li>Redis 批量操作的方式有哪些？</li><li>缓存穿透和缓存雪崩问题了解么？有哪些解决办法？</li><li>如何基于 Redis 实现分布式锁？</li><li>什么是 Sentinel？ 有什么用？</li><li>Sentinel 如何检测节点是否下线？主观下线与客观下线的区别?</li><li>Sentinel 是如何实现故障转移的？</li><li>Sentinel 如何选择出新的 master（选举机制）?</li><li>如何从 Sentinel 集群中选择出 Leader ？</li><li>Sentinel 可以防止脑裂吗？</li><li>为什么需要 Redis Cluster？解决了什么问题？有什么优势？</li><li>Redis Cluster 是如何分片的？</li><li>为什么 Redis Cluster 的哈希槽是 16384 个?</li><li>如何确定给定 key 的应该分布到哪个哈希槽中？</li><li>Redis Cluster 支持重新分配哈希槽吗？</li><li>Redis Cluster 扩容缩容期间可以提供服务吗？</li><li>Redis Cluster 中的节点是怎么进行通信的？</li></ol><p>参考答案：</p><ol><li><a href="https://javaguide.cn/database/redis/cache-basics.html">缓存基础常见面试题总结</a></li><li><a href="https://javaguide.cn/database/redis/redis-questions-01.html">Redis 常见面试题总结</a></li></ol><h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a><strong>ES</strong></h3><ol><li>项目中用 ES 做了什么？ES 可以帮助我们做什么？</li><li>Lucene 是什么？为什么不直接用 Lucene？</li><li>为什么用 ES 不用 MySQL？（两者应用场景不同）</li><li>为什么用 ES 不用 Hbase？(两者应用场景不同)</li><li>为什么 ES 检索比较快？倒排索引和正排索引是什么？倒排索引由什么组成？两者区别是什么？</li><li>分词器什么用？项目用的是什么分词器？如果我们要基于拼音搜索应该如何做？</li><li>项目中 ES 和 MySQL 的数据是如何进行同步的？</li><li>ES 集群中的数据是如何被分配的（分片）？自定义路由有什么好处？</li></ol><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a><strong>网络</strong></h2><p><strong>网络分层模型</strong> ：</p><ol><li>OSI 与 TCP&#x2F;IP 各层的结构与功能。</li><li>为什么网络要分层？</li><li>OSI 与 TCP&#x2F;IP 各层都有哪些协议?</li></ol><p><strong>TCP 与 UDP</strong> ：</p><ol><li>TCP 的三次握手与四次挥手的内容？ TCP 为什么连接是三次握手而断开是四次握手？</li><li>TCP 与 UDP 的区别及使用场景</li><li>TCP 是如何保证传输的可靠性？</li><li>HTTP 基于 TCP 还是 UDP？</li></ol><p><strong>HTTP</strong> ：</p><ol><li>HTTP 状态码有哪些？</li><li>一次完整的 HTTP 请求所经的步骤</li><li>HTTP 协议了解么？HTTP 是基于 TCP 还是 UDP 的？</li><li>HTTP 报文的内容简单说一下！ HTTP 请求报文和响应报文中有哪些数据？</li><li>HTTP 和 HTTPS 的区别了解么？</li><li>HTTP&#x2F;1.0 和 HTTP&#x2F;1.1 有什么区别？</li><li>HTTP&#x2F;1.1 和 HTTP&#x2F;2.0 有什么区别？</li><li>HTTP&#x2F;2.0 和 HTTP&#x2F;3.0 有什么区别？</li><li>HTTP 请求有哪些常见的状态码？</li><li>HTTP 长连接和短连接了解么？</li><li>Cookie 和 Session 的关系</li><li>URI 和 URL 的区别是什么?</li></ol><p><strong>PING</strong> ：</p><ol><li>PING 命令的作用是什么？</li><li>PING 命令的工作原理是什么？</li></ol><p><strong>IP</strong> ：</p><ol><li>IP 协议的作用是什么？</li><li>什么是 IP 地址？IP 寻址如何工作？</li><li>IPv4 和 IPv6 有什么区别？</li></ol><p>参考答案：<a href="https://javaguide.cn/cs-basics/network/other-network-questions.html">计算机网络常见面试题总结</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a><strong>操作系统</strong></h2><ol><li>进程和线程的区别</li><li>进程有哪几种状态?</li><li>进程间的通信方式</li><li>线程间的同步的方式</li><li>PCB</li><li>进程的调度算法</li><li>什么是死锁？死锁的四个必要条件，解决死锁的方法</li><li>常见的内存管理机制</li><li>内存碎片</li><li>分段机制和分页机制的区别和共同点</li><li>分段机制和分页机制下的地址翻译过程分别是怎样的</li><li>单级页表有什么问题？为什么需要多级页表？</li><li>TLB 有什么用？使用 TLB 之后的地址翻译流程是怎样的？</li><li>页缺失，常见的页面置换算法有哪些?</li><li>硬链接和软链接有什么区别？</li><li>常见的磁盘调度算法有哪些？</li></ol><p>参考答案：<a href="https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-01.html">操作系统常见面试题总结</a></p><h2 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a><strong>算法和数据结构</strong></h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong>算法</strong></h3><ol><li>LRU 算法了解吗？你能实现一个吗？</li><li>写排序算法（快排、堆排）</li><li>使用数组实现一个栈</li><li>使用数组实现一个队列</li><li>实现一个链表、反转链表、</li><li>……</li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a><strong>数据结构</strong></h3><ol><li>数组 vs 链表</li><li>栈的应用场景</li><li>队列的分类、应用场景</li><li>红黑树的特点、红黑树 vs 二叉查找树</li><li>哈希表、哈希表应用场景</li><li>布隆过滤器了解吗？</li><li>……</li></ol><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a><strong>系统设计</strong></h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><strong>设计模式</strong></h3><ol><li>何为设计模式？有哪些常见的设计模式？</li><li>单例模式了解么？说一下单例模式的使用场景。手写一个单例模式的实现。</li><li>观察者模式了解么？说一下观察者模式的使用场景。</li><li>工厂模式了解么？说一下工厂模式的使用场景。</li><li>责任链模式了解么？哪些开源项目（Netty、MyBatis …）中用到了责任链模式？怎么用的？</li><li>SOLID 原则了解么？简单谈谈自己对于单一职责原则和开闭原则的理解。</li><li>阅读 Spring 源码的时候什么设计模式最让你影响深刻？能简单讲讲吗？</li></ol><p>参考答案：<a href="https://javaguide.cn/system-design/design-pattern.html">设计模式常见面试题总结</a></p><h3 id="常见框架"><a href="#常见框架" class="headerlink" title="常见框架"></a><strong>常见框架</strong></h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a><strong>Spring</strong></h4><ol><li>什么是 Spring 框架?</li><li>列举一些重要的 Spring 模块？</li><li>谈谈自己对于 Spring IoC 和 AOP 的理解</li><li>Spring Bean 的生命周期说一下</li><li>Spring 中的 bean 的作用域有哪些?</li><li>拦截器和过滤器了解么？</li><li>Spring 动态代理默认用哪一种</li><li>hibernate 和 mybatis 区别</li><li>Spring Boot 和 Spring 的区别</li><li>说出使用 Spring Boot 的主要优点</li><li>什么是 Spring Boot Starter?</li><li>介绍一下@SpringBootApplication 注解</li><li>Spring Boot 的自动配置是如何实现的?</li><li>Spring Boot 支持哪些嵌入式 web 容器？</li></ol><p>参考答案：<a href="https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html">Spring 常见面试题总结</a></p><h4 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a><strong>Netty</strong></h4><ol><li>BIO,NIO 和 AIO 有啥区别？</li><li>Netty 是什么？为啥不直接用 NIO 呢?</li><li>为什么要用 Netty？Netty 应用场景了解么？</li><li>介绍一下 Netty 的核心组件？</li><li>Bootstrap 和 ServerBootstrap 了解么？</li><li>NioEventLoopGroup 默认的构造函数会起多少线程？</li><li>Netty 线程模型了解么？</li><li>什么是 TCP 粘包&#x2F;拆包?有什么解决办法呢？</li><li>Netty 长连接、心跳机制了解么？</li></ol><p>参考答案：<a href="https://javaguide.cn/system-design/framework/netty.html">Netty 常见面试题总结</a></p><h3 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a><strong>权限认证</strong></h3><ol><li>认证 (Authentication) 和授权 (Authorization)的区别是什么？</li><li>什么是 Cookie ? Cookie 的作用是什么?如何在服务端使用 Cookie ?</li><li>Cookie 和 Session 有什么区别？如何使用 Session 进行身份验证？</li><li>如果没有 Cookie 的话 Session 还能用吗？</li><li>为什么 Cookie 无法防止 CSRF 攻击，而 token 可以？</li><li>什么是 Token?什么是 JWT?如何基于 Token 进行身份验证？</li><li>什么是 OAuth 2.0？</li><li>什么是 SSO(单点登录)？</li></ol><p>参考答案：</p><ol><li><a href="https://javaguide.cn/system-design/security/basis-of-authority-certification.html">认证授权基础概念详解</a></li><li><a href="https://javaguide.cn/system-design/security/jwt-intro.html">JWT 基础概念详解</a></li><li><a href="https://javaguide.cn/system-design/security/advantages&disadvantages-of-jwt.html">JWT 身份认证优缺点分析</a></li><li><a href="https://javaguide.cn/system-design/security/design-of-authority-system.html">权限系统设计详解</a></li></ol><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a><strong>分布式</strong></h2><h3 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a><strong>分布式理论</strong></h3><ol><li><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/cap&base-theorem.html">CAP &amp; BASE 理论详解</a></li><li><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/paxos-algorithm.html">Paxos 算法详解</a></li><li><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/raft-algorithm.html">Raft 算法详解</a></li></ol><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a><strong>RPC</strong></h3><p><strong>RPC 基础：</strong></p><ol><li>了解 RPC 吗？有哪些常见的 RPC 框架？</li><li>如果让你自己设计 RPC 框架你会如何设计？</li><li>服务之间的调用为啥不直接用 HTTP 而用 RPC？</li></ol><p>参考答案：<a href="https://javaguide.cn/distributed-system/rpc/rpc-intro.html">RPC 基础常见面试题总结</a></p><p><strong>Dubbo:</strong></p><ol><li>Dubbo 了解吗？</li><li>Dubbo 的工作原理了解么？注册中心扮演了什么角色？注册中心挂了可以继续通信吗？</li><li>Dubbo 的负载均衡策略了解么？</li><li>Dubbo 的 spi 机制了解么？带来了啥好处？</li></ol><p>参考答案：<a href="https://javaguide.cn/distributed-system/rpc/dubbo.html">Dubbo 常见面试题总结</a></p><h3 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a><strong>分布式 ID</strong></h3><ol><li>何为 ID？</li><li>何为分布式 ID？</li><li>一个合格的分布式 ID 需要满足什么要求?</li><li>分布式 ID 常见的生成方法有哪些？（数据库主键自增、数据库的号段模式、UUID、SNOWFLAKE 等等）</li></ol><p>参考答案：<a href="https://javaguide.cn/distributed-system/distributed-id.html">分布式 ID 常见面试题总结</a></p><h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a><strong>API 网关</strong></h3><ol><li>什么是网关？</li><li>网关能提供哪些功能？</li><li>有哪些常见的网关系统？</li></ol><p>参考答案：<a href="https://javaguide.cn/distributed-system/api-gateway.html">API 常见面试题总结</a></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a><strong>分布式锁</strong></h3><p>基于 Redis 实现分布式锁：</p><ol><li>如何基于 Redis 实现一个最简易的分布式锁？</li><li>为什么要给锁设置一个过期时间？</li><li>如何实现锁的优雅续期？</li><li>如何实现可重入锁？</li><li>Redis 如何解决集群情况下分布式锁的可靠性？</li></ol><p>基于 ZooKeeper 实现分布式锁：</p><ol><li>如何基于 ZooKeeper 实现分布式锁？</li><li>为什么要用临时顺序节点？</li><li>为什么要设置对前一个节点的监听？</li><li>如何实现可重入锁？</li></ol><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a><strong>高并发</strong></h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a><strong>消息队列</strong></h3><ol><li>为什么要用消息队列?</li><li>对比一下常见的消息队列?</li><li>如何保证消息不被重复消费?</li><li>如何保证消息消费的顺序性?</li></ol><h3 id="CDN（内容分发网络）"><a href="#CDN（内容分发网络）" class="headerlink" title="CDN（内容分发网络）"></a><strong>CDN（内容分发网络）</strong></h3><ol><li>什么是 CDN ？</li><li>CDN 的工作原理是什么？</li></ol><p>参考答案：<a href="https://javaguide.cn/high-performance/cdn.html">CDN（内容分发网络）详解</a></p><h3 id="读写分离和分库分表"><a href="#读写分离和分库分表" class="headerlink" title="读写分离和分库分表"></a><strong>读写分离和分库分表</strong></h3><ol><li>什么是读写分离？</li><li>主库和从库的数据存在延迟的问题如何解决？</li><li>如何实现读写分离？主从复制原理是什么？</li><li>什么是分库？什么是分表？什么情况下需要分库分表？</li><li>常见的分片算法有哪些？</li><li>分库分表会带来什么问题呢？</li><li>分库分表后，数据怎么迁移呢？</li></ol><p>参考答案：<a href="https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html">读写分离和分库分表详解</a></p><h2 id="系统设计-场景题"><a href="#系统设计-场景题" class="headerlink" title="系统设计&#x2F;场景题"></a><strong>系统设计&#x2F;场景题</strong></h2><ol><li>假如有 10 亿个数，只有一个重复，内存只能放下 5 亿个数，怎么找到这个重复的数字？</li><li>如何设计一个秒杀系统（服务端、数据库、分布式）？分布式系统的设计？</li><li>有一个服务器专门接收大量请求，怎么设计？</li><li>如果让你自己设计 RPC 框架你会如何设计？</li><li>怎么快速出现一个 stackoverflow 错误？</li><li>如何设计一个秒杀系统？</li><li>如何设计一个微博 Feed 流&#x2F;信息流系统？</li><li>如何设计一个短链系统？</li></ol><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a><strong>项目经历</strong></h2><ol><li>说说你的项目中的亮点有哪些？</li><li>项目用户人数有多少？最大在线人数多少？</li><li>画一下你的项目的架构图。</li><li>项目中遇到的困难有哪些？怎么解决的？</li><li>xx 某块的数据库表是如何设计的？</li></ol><h2 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a><strong>HR 面</strong></h2><ol><li>个人介绍</li><li>平时的兴趣爱好</li><li>对我们公司的了解</li><li>三个词形容自己</li><li>职业规划</li><li>平时的学习方式</li><li>大学里做过比较有意义的事情</li><li>手里还有哪些 offer</li><li>选择工作的理由排序（薪资、加班情况之类的）。</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a><strong>经验总结</strong></h2><ol><li>学完了某个知识点之后，你可以去看看对应的八股文和知识点总结（<a href="https://javaguide.cn/%EF%BC%89%E3%80%82">https://javaguide.cn/）。</a></li><li>多面试，不要害怕失败，多总结经验。</li><li>尽早准备，不论是找工作前、面试前还是面试后。</li><li>如果是求职目标是中小厂、国企的话，算法相对来说不是那么重要。</li><li>如果你的学历比较一般的话，格外注意要把重心放在自己的项目经历上。</li><li>熟悉自己的简历。</li><li>电话和视频面试很平常，面试前提前准备一下。</li><li>复盘！！！不管是面试失败还是成功，都要养成复盘的好习惯。</li></ol>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第18题_四数之和</title>
    <link href="/2023/11/28/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/9-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2023/11/28/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/9-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/4sum/">力扣题目链接</a></p><p><a href="https://www.bilibili.com/video/BV1DS4y147US">难在去重和剪枝！| LeetCode：18. 四数之和 (opens new window)</a></p><p>在三数之和的基础上套多一个循环，注意剪枝条件即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">fourSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br><br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-comment">// 剪枝</span><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (target &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt; target) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextI</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> nextI; j &lt; nums.length; ++j) &#123;<br>                <span class="hljs-comment">// 剪枝</span><br>                <span class="hljs-keyword">if</span> (j &gt; nextI &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (target &gt; <span class="hljs-number">0</span> &amp;&amp; nums[j] &gt; <span class="hljs-number">0</span> &amp;&amp; nums[j] &gt; target) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> j + <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) (nums[i]) + nums[j] + nums[l] + nums[r];<br>                    <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                        ret.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));<br>                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) &#123;<br>                            l++;<br>                        &#125;<br>                        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) &#123;<br>                            r--;<br>                        &#125;<br>                        l++;<br>                        r--;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>                        r--;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        l++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-三数之和</title>
    <link href="/2023/11/28/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/8-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2023/11/28/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/8-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></p><p>最容易想的是暴力破解</p><p>优化一下，排序+双指针</p><ol><li>排序</li><li>第一层循环，遍历数组的数，遍历下标为 i，当 nums[i] &gt; 0，a + b + nums[i] 必定大于 0<ol><li>内部循环，left &lt; right 时循环<br>left &#x3D; nums[i + 1]，right &#x3D; nums[nums.length - 1]。<br>a &#x3D; nums[left]，b &#x3D; nums[right]<br>sum &#x3D; a + b + nums[i]<br>当 sum &#x3D; 0，记录并缩小重复窗口<br>当 sum &gt; 0，right–<br>当 sum &lt; 0，left++</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//定义三个指针，保证遍历数组中的每一个结果</span><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">//定义一个结果集</span><br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//数组的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-comment">//当前数组的长度为空，或者长度小于3时，直接退出</span><br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || len &lt;<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-comment">//将数组进行排序</span><br>        Arrays.sort(nums);<br>        <span class="hljs-comment">//遍历数组中的每一个元素</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;len;i++)&#123;<br>            <span class="hljs-comment">//如果遍历的起始元素大于0，就直接退出</span><br>            <span class="hljs-comment">//原因，此时数组为有序的数组，最小的数都大于0了，三数之和肯定大于0</span><br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//去重，当起始的值等于前一个元素，那么得到的结果将会和前一次相同</span><br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i +<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> len-<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//当 l 不等于 r时就继续遍历</span><br>            <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>                <span class="hljs-comment">//将三数进行相加</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[i] + nums[l] + nums[r];<br>                <span class="hljs-comment">//如果等于0，将结果对应的索引位置的值加入结果集中</span><br>                <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 将三数的结果集加入到结果集中</span><br>                    res.add(Arrays.asList(nums[i], nums[l], nums[r]));<br>                    <span class="hljs-comment">//在将左指针和右指针移动的时候，先对左右指针的值，进行判断</span><br>                    <span class="hljs-comment">//如果重复，直接跳过。</span><br>                    <span class="hljs-comment">//去重，因为 i 不变，当此时 l取的数的值与前一个数相同，所以不用在计算，直接跳</span><br>                    <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l+<span class="hljs-number">1</span>]) &#123;<br>                        l++;<br>                    &#125;<br>                    <span class="hljs-comment">//去重，因为 i不变，当此时 r 取的数的值与前一个相同，所以不用在计算</span><br>                    <span class="hljs-keyword">while</span>(l&lt; r &amp;&amp; nums[r] == nums[r-<span class="hljs-number">1</span>])&#123;<br>                        r--;<br>                    &#125; <br>                    <span class="hljs-comment">//将 左指针右移，将右指针左移。</span><br>                    l++;<br>                    r--;<br>                    <span class="hljs-comment">//如果结果小于0，将左指针右移</span><br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>)&#123;<br>                    l++;<br>                    <span class="hljs-comment">//如果结果大于0，将右指针左移</span><br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">0</span>)&#123;<br>                    r--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第454题.四数相加II</title>
    <link href="/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/6-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0/1-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/6-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0/1-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/4sum-ii/">力扣题目链接</a></p><p>emmm，看了答案，我以为有什么高明的解法，不过也没想到。将四维降低为二维</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fourSumCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span>[] nums3, <span class="hljs-type">int</span>[] nums4)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums2.length; ++j) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> nums1[i] + nums2[j];<br>                map.put(a, map.getOrDefault(a, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums3.length; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums4.length; ++j) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> -(nums3[i] + nums4[j]);<br>                ans += map.getOrDefault(a, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-两数之和</title>
    <link href="/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/5-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/5-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/two-sum/">力扣题目链接</a></p><p>不逼逼，哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> target - nums[i];<br>            <span class="hljs-keyword">if</span> (map.containsKey(a)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, map.get(a)&#125;;<br>            &#125;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第202题.快乐数</title>
    <link href="/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/4-%E5%BF%AB%E4%B9%90%E6%95%B0/%E7%AC%AC202%E9%A2%98_%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
    <url>/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/4-%E5%BF%AB%E4%B9%90%E6%95%B0/%E7%AC%AC202%E9%A2%98_%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/happy-number/">力扣题目链接</a></p><p>无限循环，如果出现之前出现过的数，说明循环了</p><blockquote><p>这里没想出来是以为会出现无限不重复，理解错了</p></blockquote><ol><li>很简单，先定义 1-9 的每个平方数的值，避免重复计算</li><li>然后将结果存入 set</li><li>逐个计算结果求和</li><li>重复第二步，直到 set 中出现重复结果或结果等于 1</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">byte</span>[] bit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span> ; ++i) &#123;<br>            bit[i] = (<span class="hljs-type">byte</span>) (i * i);<br>        &#125;<br><br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sum % <span class="hljs-number">10</span>;<br>                tmp += bit[b];<br>                sum /= <span class="hljs-number">10</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (set.contains(tmp)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            set.add(tmp);<br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            sum = tmp;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>349.两个数组的交集</title>
    <link href="/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/3-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
    <url>/2023/11/27/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/3-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="349"><a href="#349" class="headerlink" title="349"></a>349</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">力扣题目链接(opens new window)</a></p><p><a href="https://www.bilibili.com/video/BV1ba411S7wu">学透哈希表，set使用有技巧！Leetcode：349. 两个数组的交集</a></p><p><a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录-349. 两个数组的交集</a></p><p>看题目可以发现最大值比较小，0-1000，直接 boolean 数组写死去做，记录是否出现。最后根据下标拿到数字即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        <span class="hljs-type">boolean</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">1001</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>            count[nums1[i]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span>[] rsCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">1001</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (count[nums2[i]]) &#123;<br>                rsCount[nums2[i]] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        List&lt;Integer&gt; rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; rsCount.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (rsCount[i]) &#123;<br>                rs.add(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[rs.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rs.size(); i++) &#123;<br>            ans[i] = rs.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="350"><a href="#350" class="headerlink" title="350"></a>350</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays-ii/">350.两个数组的交集 II</a></p><p>和上面的差不多，但是需要重复次数相同，用 map 集合 key&#x3D;num, value&#x3D;count</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersect(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.getOrDefault(nums1[i], <span class="hljs-number">0</span>);<br>            map.put(nums1[i], ++count);<br>        &#125;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.get(nums2[i]);<br>            <span class="hljs-keyword">if</span> (count != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>                    map.remove(nums2[i]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    list.add(nums2[i]);<br>                    map.put(nums2[i], --count);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[list.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            ans[i] = list.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者可以先排序，再用双指针<br>1 1 1 3 5 7 7 9<br>0 1 1 5 7 8</p><p>思路：</p><ol><li>p1, p2 分别指向两个链表</li><li>从起始位置开始</li><li>比较两个数的大小，小指针往后移动</li><li>直到二者相等，同时记录结果值</li><li>重复第三步，直到其中一个数组到达末尾</li><li>返回结果</li></ol><p>题目中还提到如果部分数字在磁盘中如果采用方法二，无法高效排序。所以选方法一</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源</title>
    <link href="/2023/11/23/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/3-%E8%B5%84%E6%BA%90/"/>
    <url>/2023/11/23/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/3-%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>应该有用的</p><ul><li><a href="https://zahui.fan/posts/64b52e0d/">最后一个Typora免费版0.11.18</a>      现在收费了，其他软件不好写</li><li><a href="https://blog.csdn.net/qq_40991313/article/details/126646289">【Java笔记+踩坑汇总】Java基础+JavaWeb+SSM+SpringBoot+SpringCloud+瑞吉外卖&#x2F;黑马旅游&#x2F;谷粒商城&#x2F;学成在线+设计模式+面试题汇总+性能调优&#x2F;架构设计+源码</a>     面试，教程等，也算学习路线吧</li><li><a href="https://cn.tradingview.com/">tradingview</a>    交易看盘，太久没打开差点记不住了</li><li><a href="http://www.guziyuan.cn/">股票资源网</a></li><li><a href="https://www.xuebapan.com/">资源网</a></li></ul><hr><hr><p>健身部分：</p><p><strong><em>翻译：兔兔姐28，戴夫健身，*<strong>豹哥健身</strong></em>。*</strong></p><p>动作讲解部分，主要参考——大Jeff、小Jeff、德国兄弟</p><p>健身理论部分，主要参考——Jeremy、小Jeff</p><p>健身科普（有一定训练基础的）：<strong><em>昊然健身，就是宫城良田，凯圣王*<strong>，德意的健身笔记，</strong></em>SBD怪獸講堂，云健身-仰望尾迹云*</strong></p><p>健身综合: 帅soserious（视频制作不错），短腿小萝卜（和王华老师约练很硬核，B站最成功和火健身UP之二，但是他的健身方法不适合普通人），<strong>gandy</strong>（动作讲解），卓叔增重</p><p>健力：<strong>ZBY力量举</strong>，深蹲博士何渭斌力，</p><p><strong>Wenning strength</strong>，</p><p><strong>直播特别推荐：闫宁-中国张孔，老唐</strong></p><p>综合体态：运动与解剖</p><p>生活娱乐博主：健助师_小柯（有点贩卖焦虑），<strong>马哥健身厨房</strong>。</p><p>女UP：  三田馆力量举 ，<strong>罗耍耍</strong></p><p>作者：直男癌晚期<br>链接：<a href="https://www.zhihu.com/question/267362695/answer/1898620223">https://www.zhihu.com/question/267362695/answer/1898620223</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><hr><p>资源整理，加了一个知识星球，但是里面的资源非常混乱，引用链接互相嵌套，点多久乱了，整理一下</p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/118811814512212">https://wx.zsxq.com/dweb2/index/topic_detail/118811814512212</a>       所有链接</p><ol><li>Java面试指北，需要配合指南一起用</li><li>场景题</li><li>源码</li><li>手动 RPC</li><li>…..不用管，并入第一个</li><li>kafka 面试题</li><li>…..兼职，暂缓</li><li>…..读书笔记，暂缓</li></ol><p>面试：</p><ul><li><a href="https://javaguide.cn/">JavaGuide</a>（「Java 学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！）。</li><li><a href="https://t.zsxq.com/Uv3ByZn">《Java面试指北》</a>   要开知识星球会员</li></ul><p>笔试：<a href="https://wx.zsxq.com/dweb2/index/topic_detail/411822518445888">https://wx.zsxq.com/dweb2/index/topic_detail/411822518445888</a></p><ul><li>非常规 LeetCode：</li><li>算法：<ul><li>《剑指 Offer（专项突击版）》: <a href="https://doocs.github.io/leetcode/#/lcof2/README">LeetCode &amp; Coding Interview Guide - Doocs Open Sou…</a> </li><li>《程序员面试金典（第 6 版）》: <a href="https://doocs.github.io/leetcode/#/lcci/README">LeetCode &amp; Coding Interview Guide - Doocs Open Sou…</a> </li><li>Leetcode 面试经典 150 题：<a href="https://leetcode.cn/studyplan/top-interview-150/">面试经典 150 题 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台</a> 。 </li><li>Leetcode 的100道高频算法题：<a href="https://leetcode.cn/studyplan/top-100-liked/">LeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台</a> 。 </li><li>牛客网面试高频202：<a href="https://www.nowcoder.com/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AF%87&topicId=354">牛客网在线编程_算法篇_面试高频TOP202</a> </li><li>另外，还可以参考一下 <a href="https://codetop.cc/home">CodeTop企业题库</a>  这个网站上的高频算法题。</li></ul></li></ul><p>原创 PDF 面试资料（内容很全面，可选择需要的进行学习，大部分皆为 JavaGuide 原创）： </p><p>阿里云盘：<a href="https://www.aliyundrive.com/s/5CdbBZ8yYuS">阿里云盘分享</a> 提取码: 26zv </p><p>百度云盘：链接: <a href="https://pan.baidu.com/s/108U2Pz9iIKNafdB8XIXntw?pwd=uuch">百度网盘 请输入提取码</a> 提取码: uuch</p>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>熊猫交易学社-基础篇</title>
    <link href="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="K线"><a href="#K线" class="headerlink" title="K线"></a>K线</h1><p>最高（H）、最低（L）、开盘（O）、收盘（C），周期（T）</p><p>分类有三类，阴线实体、阳线实体、无实体</p><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/image-20231122181437484.png" alt="image-20231122181437484"></p><h2 id="实体K线"><a href="#实体K线" class="headerlink" title="实体K线"></a>实体K线</h2><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/image-20231122181556984.png" alt="image-20231122181556984"></p><p>力量对比 a &gt; b &gt; c &gt; d</p><p>a: 空方没有任何抵抗<br>b: 空方抵抗了一下<br>c: 空方稍强力，多方被压<br>d: 多空均衡</p><h2 id="无实体K线"><a href="#无实体K线" class="headerlink" title="无实体K线"></a>无实体K线</h2><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/image-20231122181923023.png" alt="image-20231122181923023"></p><h2 id="K线背后意思"><a href="#K线背后意思" class="headerlink" title="K线背后意思"></a>K线背后意思</h2><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/image-20231122182952147.png" alt="image-20231122182952147"></p><p>在多空争夺中，产生的影线越长，量能越大，说明对方的力量越大。比如上影线很长，伴随巨大量能，说明市场空方力量大，实体越大，伴随能量，力量越大</p><p>多空形态互相对称，记十个就好了</p><p>具体看《日本蜡烛图》</p><p>出现大阳线之后，如果后面的行情阴线越来越多，也没有越来越往压力位逼近（重心上移），放量（有分歧），回调次数越来越多，回调程度深，达到了阳线的一半以上，考虑减仓或退出，空头同理</p><p>趋势线：任何两点都能连线，所以趋势线如果没有得到第三点的验证，则失效</p><h1 id="黄金K"><a href="#黄金K" class="headerlink" title="黄金K"></a>黄金K</h1><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/12%E9%87%91K%E8%AF%B4%E6%98%8E.jpg" alt="12金K说明"></p><p>个人觉得，这些K线可以组合合并。</p><p><img src="/2023/11/22/%E4%BA%A4%E6%98%93/3-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E5%9F%BA%E7%A1%80%E7%AF%87/image-20231123112406470.png" alt="image-20231123112406470"></p><p>看涨吞没的两根K线合并，成蜻蜓线。看跌吞没的两根K线可以合并成坟墓石，其他的K线也是类似，但是涉及力度问题，合并的K线越多，说明越墨迹</p><blockquote><p>大阳线和大阴线的大，是相对于附近几个K线来说的，成交量也是</p></blockquote><p>孕线、刺透、看跌吞没，属于同一类，但是孕线力度小，直接忽略</p><p>to do list</p><ul><li><input disabled type="checkbox"> 排列组合一下并记住一下可以提高交易时的反应速度</li></ul><h1 id="期权"><a href="#期权" class="headerlink" title="期权"></a>期权</h1><p>5、27.06</p><p>6   开头</p><p>从进场之后的每根K线，都需要去解读市场告诉你什么，从而判断是否加仓减仓等</p><p>如果价格打到目标位再下来，不要接单</p><p>越到高位影线越长越频繁，说明行情走的有点勉强 </p><h1 id="均线"><a href="#均线" class="headerlink" title="均线"></a>均线</h1><h2 id="MA"><a href="#MA" class="headerlink" title="MA"></a>MA</h2><p>N天收盘价均值计算</p><p>抵扣日，被顶替掉的一天</p><ul><li>新增日 &gt; 抵扣日 &#x3D; 均线向上</li><li>新增日 &lt; 抵扣日 &#x3D; 均线向下</li><li>新增日 &#x3D; 抵扣日 &#x3D; 均线持平</li></ul><p>所以，如果做多单，就希望均线往上拐头，一般用的是 20 日均线，所以后续新增价格不应该低于 20 日的抵扣价，否则无法上拐头，因此，利用这个可以帮助找到支撑位（止损位 ）</p><h2 id="EMA"><a href="#EMA" class="headerlink" title="EMA"></a>EMA</h2><p>当前价格高权重</p><p>短期 EMA：5,10<br>长期 EMA：20,30 </p><p>EMA 使用口诀</p><p>长走平（升），短走升，黄金交叉偷（轻微调整）<br>突破 &#x3D; 买（突破单）</p><p>![截屏2023-11-25 01.19.26](3-熊猫交易学社-基础篇&#x2F;截屏2023-11-25 01.19.26.png)</p><p>一直多头排列，一直持仓</p><p>回踩不破，买</p><p>常用数列：<br>时间周期：5,10,20,30,40,50,60…100,200,300….<br>斐波那契数列：1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,  610</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>可以利用Bianca的API获取盘口信息，得到挂单信息和成交信息，可以监控大资金的建仓信息，跟随大资金动作。如果可以，考虑反查钱包地址，跟随动作？如果是韭菜，可以作为反向指标。</p><p>但是现在并不属于本阶段该干的事</p><ol><li>学习形态、指标</li><li>利用学习到的进行实盘复盘</li><li>连续半年实单下盘，以每个月为阶段，六个阶段</li><li>使用正常资金操作，同时观察数据波动，考虑程序化下单、监控</li><li>实现自动化交易</li></ol><p><a href="https://binance-docs.github.io/apidocs/spot/cn">https://binance-docs.github.io/apidocs/spot/cn</a></p><p><a href="https://github.com/binance/binance-connector-java">https://github.com/binance/binance-connector-java</a>    Bianca Java API 代码库</p><p><a href="https://github.com/yukaiji/buildVpn">https://github.com/yukaiji/buildVpn</a>        自搭建 VPN</p><p><a href="https://muzihuaner.github.io/2021/09/22/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%A5%9E%E5%99%A8ZeroTier%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://muzihuaner.github.io/2021/09/22/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%A5%9E%E5%99%A8ZeroTier%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a>    内网穿透软件</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熊猫交易学社-认知篇</title>
    <link href="/2023/11/21/%E4%BA%A4%E6%98%93/2-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E8%AE%A4%E7%9F%A5%E7%AF%87/"/>
    <url>/2023/11/21/%E4%BA%A4%E6%98%93/2-%E7%86%8A%E7%8C%AB%E4%BA%A4%E6%98%93%E5%AD%A6%E7%A4%BE-%E8%AE%A4%E7%9F%A5%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><p>后面看书学最好，结合自己的交易系统做对比</p><p>第一阶段：</p><ul><li>指标<ul><li>K线：高开低收，背后形成原理，K线组合</li><li>均线：MA，EMA，葛兰碧八大法则</li></ul></li><li>书<ul><li>《日本蜡烛图技术》</li><li>《华尔街选股技术》</li><li>《专业投机原理》</li><li>《从0开始学炒股》</li><li>《股票大作操盘术》</li></ul></li></ul><p>第二阶段</p><ul><li>指标（可以看老猫与指标，B站已停更，可以看油管）<ul><li>支撑压力位：会找、会用</li><li>形态：楔形、旗型、头肩顶、头肩底等等</li><li>指标：布林带、MACD等</li><li>…….</li></ul></li><li>书<ul><li>《YTC系列书籍》没有纸质版只有电子版，还有附录等</li><li>《裸K线交易法》讲了很多案例</li></ul></li></ul><p>第三阶段</p><ul><li>指标<ul><li>仓位管理</li><li>庄家操盘手法</li><li>交易系统<ul><li>擅长方向：突破单、反弹单、回调多、Pinbar</li><li>建仓手法、加仓手法、减仓手法</li></ul></li><li>交易心理</li></ul></li><li>书<ul><li>《投资交易心理分析》</li><li>《高级趋势技术分析》《高级波段技术分析》《高级反转技术反洗》上下     一共四本一系列，阿尔布鲁克斯，适合五分钟交易写的，有点圣经的感觉</li></ul></li></ul><p>K线 &gt;  形态  &gt;  指标。K线是价格，价格发生波动才形成形态，指标是根据收盘开盘价等已知数据计算出来的，所以 K 线是基础东西</p><p>币圈和公司需要持有不同的态度，公司是有基本面，真实存在的东西</p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p>图标类：主升浪、阴跌、井喷、吸盘、吸筹、控盘、骗线、横盘、反弹、回调、瀑布、反转</p><p>仓位类：仓位、全仓、补仓、加仓、建仓、减仓、锁仓、空仓、轻仓、重仓、半仓、清仓</p><p>操作类：搬砖、场外交易、割肉（斩仓）、止盈、止损、套牢、解套、踏空、过山车、囤币、做空、做多、抄底</p><blockquote><p>搬砖：不同交易所的比特币价格是不一样的，甚至同一个交易所的价格同类商品的价格是不一样的，可以在低价交易所买入，高交易所卖出，这个我还没实测过，是否需要收手续费等</p></blockquote><p>提升类：盈亏比、做市商、持仓均价、盘口、买盘、卖盘、深度图、（保证金、杠杆、倍数、合约、爆仓、永续合约、币本位合约）、市价单、限价单、一级二级市场、中心化交易所、去中心化交易所</p><blockquote><p>盈亏比、胜率、仓位、杠杆   之间有动态的平衡。胜率高了可以适当降低盈亏比，提高杠杆。总的目的是为了少亏钱</p><p>在开单之前就把这些东西计算出来</p><p>深度图表示委托单的深度情况，深度越大，对应价格的阻力越大</p></blockquote><p>其他：开盘价、收盘价、最高价、最低价、牛市、熊市、多头、空头、利空、利多、割韭菜、老鼠仓</p><h1 id="背后原因"><a href="#背后原因" class="headerlink" title="背后原因"></a>背后原因</h1><p>市场是炒作商品，商品的价格由供需决定，归根还是人对这个商品的买卖的决定。商品以某种价格成交，成交价格就是真实变动价格</p><p>有些人资金多，购买的商品就多，在购买的过程中可就会推动价格，这些可以通过成交量等等数据分析出来，所以，看指标、形态、等等，目的是为了分析大资金的动作（庄家），从而跟随他们喝汤</p><h1 id="行情类型"><a href="#行情类型" class="headerlink" title="行情类型"></a>行情类型</h1><ol><li>测试架构。测试支撑压力，来回测试。找到信号低多高空即可</li><li>突破失败。假破，这种方式容易抄到区间底（百分之八十的突破都会失败）</li><li>突破回撤。破支撑压力回踩</li><li>简单回撤。区间止损</li><li>复杂回撤</li></ol><p>自己熟悉什么行情模式，找自己熟悉的周期和币种，相同的行情，观察量能、走势等，去复盘</p><h1 id="做单流程"><a href="#做单流程" class="headerlink" title="做单流程"></a>做单流程</h1><ol><li>趋势<ol><li>周期：月  周  日  小时  分钟</li><li>阶段：前中后（如果出现的阴线越来越多，则说明可能到达形态末期，不是长久单）</li></ol></li><li>关键位：支撑不做空，压力位不做多</li><li>信号<strong>（结合上一个，每项二十分钟，大于六十分进场）</strong><ol><li>金K<ol><li>Pinbar。锤形线、上吊线</li><li>吞没。看涨吞没，看跌吞没</li><li>双星。黄昏星，启明星</li><li>进攻。上升三法、下降三法、多方炮、空方炮</li></ol></li><li>形态<ol><li>牛旗。始终做多</li><li>熊旗。始终做空</li><li>双顶   双底（注意结合关键位）</li><li>震荡。三角形、箱体、楔形</li></ol></li><li>布林带。五分钟、十五分钟</li><li>双隧道。五分钟、十五分钟</li><li>量能：顶部大量空，底部大量多</li></ol></li><li>交易计划<ol><li>仓位</li><li>建仓：底仓、加仓、加仓…….</li><li>止损</li><li>止盈</li><li>止损后反手</li></ol></li></ol><p>上面步骤完成后，再在交易所下单</p><p>从大周期往小周期看，在小周期做单子时，要顺着大周期的趋势，在小周期的支撑压力位上，开单，设置好止盈止损，同时做记录，记录自己的入场理由，点位等。</p><p>每次在做交易时，需要注意以下几个点</p><ol><li>大趋势</li><li>支撑压力位</li><li>入场信号（入场理由、交易系统）：金K，MACD，KDJ……</li><li>止盈止损</li><li>盈亏比</li><li>仓位</li></ol><p>开仓之后，该做什么做什么，最好不要再管行情了，仍由他发展，止盈or止损后再看。</p><p>注意：</p><ul><li>不同的交易系统都有不同的理由，入场止盈止损点等，并且市场是由一群人组成，每个人都有自己的交易系统。所以不可能每个信号都是你的。比如使用 123 法则、MACD系统、布林带、形态、波浪等等等，你只需找到符合自己交易系统的去做，无论是否止损，都是正确的。</li></ul><p>在前期，在一开始时，以 10U 为标准开单，把 10U 看成 100U，1000U，10000U，前面怎么亏的，后面就是怎么亏的。目的就是为了最小成本做单训练自己的盘感、系统、心态等。在训练一个月<strong>并且</strong>开了足够的单子后，再提升成本、将从以下几个方向训练。</p><p>再次复述，在建立或者加入新的指标或系统时：</p><ol><li>根据刚学习的指标以最小成本做单</li><li>不断复盘提高胜率，同时锻炼心态</li><li>一个月后，提升一点点成本，重复第二步</li></ol><p>入场信号有很多，后面可以加入新的交易系统，给这个入场信号打分，分数越高，信号越有效（叠 buff）。但是一开始揪住一个交易系统去做就好了，比如关键位金K</p><p>关键位上的关键K线，结合成交量，效果更好。</p><p>复盘是一样道理，找合适自己的形态去做单。</p><blockquote><p>应该考虑怎么把事情做好，而不是抱着以赚钱为目的的急躁。</p><p>怎么做好交易，怎么做好心态训练</p></blockquote><p>交易本身就是抛硬币，有时候需要欺骗自己，行情是怎么怎么怎么走，大胆下单，</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>带问题看《窃听风云2》</p><ul><li>价格怎么产生的</li><li>反派一号，手里有货吗，背后什么意思</li><li>敬老院炒高749事件中充当什么角色</li><li>操盘手在股市中什么事情是违法的</li><li>小罗是怎么炒高749</li></ul><p>看《大时代》</p><p>看 YTC 卷2 市场和市场分析 P4-P34（日本蜡烛图学过关之后，可以看，这个是翻译书，存在难读情况）</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-叽叽歪歪</title>
    <link href="/2023/11/20/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/2-%E5%8F%BD%E5%8F%BD%E6%AD%AA%E6%AD%AA/"/>
    <url>/2023/11/20/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/2-%E5%8F%BD%E5%8F%BD%E6%AD%AA%E6%AD%AA/</url>
    
    <content type="html"><![CDATA[<p>昨天梦到妈妈了，一年没打过电话什么的，不知道为啥突然梦到。也不说想，只是觉得六十岁了，也就剩下最后二十年，八千多天吧。从小一直在反驳她，拒绝沟通，拒绝情感等等。好多事情我都不记得了，挖掘一下我的记忆吧。想到了后续再补。<br>姨的女儿跟我说，小时候有一次你跑丢了，你妈妈可急了，那阵子瘦了十斤</p><ul><li>xx哥的老婆跟我说，你妈妈这么大年纪了，你也懂点事呀，有时候她说话确实不好，我们也不爱听，你妈妈也不容易…..对你挺好的，吧啦阿拉巴啦（忘记了）</li><li>有一次你点进泳池？还是水塘，我妈跳下去救我。我记忆里她住过院，不知道是不是有关联了</li><li>我妈说和别的亲戚说，当时从广州回来（老家），一个月也就这么点钱，交了房租都没了，都不知道当时怎么熬过来的，也好在熬过来了</li><li>我妈有时候嘀嘀咕咕，说钱，抱怨没钱，可我不爱听，不想因为这个影响我</li></ul><p>不懂照顾人的我现在有人需要照顾一下了，女朋友周六头疼呕吐，周日腰疼。其实我不太知道怎么做，和经历有关吧，长大的过程中也没照顾过，自然对这些事的经验和条理性有欠缺。药备了一点，但是忽略了病情对身体机能的影响，如食欲，运动状态等</p><p>周末学了交易相关的东西，浅浅入脑，可能因为很多东西之前就知道了，觉得没多少要记得东西。需要警惕的是，对交易过于上头了，为了看点学完，快点挣钱，忽视做饭，晾衣服，家务等基本事情。导致事情转嫁到他人身上。其实我也知道这些赶紧做完，然后躺在沙发上舒舒服服的学就好了。但是一放再放，女朋友的情感也有点无视，睡觉还把手机带到了床上。确实不是故意的，只能说金钱对人异化的力量太大了，我也太想有钱了</p><p>现在很多事情想做，想学，专业，工作，交易，锻炼等等，都得学习，都得思考，都得花时间，每天时间快分不出来了，同时一旦开启了 a 事情并且 a 事情与钱联系密切，就很容易上头。比如专业和交易学习，显然专业学习更有利，但是当下看不到投资，而交易能直接去市场拿钱，就导致对交易的学习比较上头</p><p>周末女朋友病了，自己去城中村逛了一下，顺便买点豆腐花之类的，路很熟悉，记忆突然被挖出来了一样。</p><p>我发现自己陷入了学而不思则罔，思而不学则殆的情况。对于专业，是学而不思，为了尽快把课程看完学完，两倍速，快进，完结，下一个，不练习，导致越到后面越忘记了前面，半桶水晃荡。对于自己未来则是一直思考，并没有成系统的学习框架，导致越来越迷茫。给我的感觉更像是，还想学习提升？在你的阶级好好呆着吧你，好好拧螺丝吧你。觉得容易陷入，盲目学习，晕头转向的境地。归根还是没有一个量化的指标、目标。比如这周要达成什么，定得太高容易回到学而不思，定的太低容易焦虑，虽然知道自己一直在学，比较要学的太多太多了….</p><hr><p>后面跟我妈说我找到女朋友了，电话打过来一上来就是生辰八字，让我又开始厌烦她了，又回到不想沟通的状态，我知道我们的认知不一样</p><hr><p>先这些吧，一篇文章拖四天…</p>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1-三大项学习</title>
    <link href="/2023/11/20/%E5%81%A5%E8%BA%AB/1-%E4%B8%89%E5%A4%A7%E9%A1%B9%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/20/%E5%81%A5%E8%BA%AB/1-%E4%B8%89%E5%A4%A7%E9%A1%B9%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="深蹲"><a href="#深蹲" class="headerlink" title="深蹲"></a>深蹲</h1><p><strong>第一步 预备动作</strong><br>合适的站距，双脚与臀同宽，下蹲，再调整宽度，下蹲，重复，直到蹲的最深，感受最好的距离。脚尖朝前或者稍微往外，舒服就好。注意，双脚距离越宽，脚尖越往外。</p><p>把杠铃放到上背斜方肌上，手腕 手肘  肩膀不疼的情况下，尽可能靠近。目的稳住上背</p><p>腿部伸展，站起，杠铃离杠，后退三步，第一远离，第二很上，第三调整。感受大脚趾  小脚趾  足跟支撑。</p><p><strong>第二步 激活肌肉，保护自己</strong><br>足底，外旋，想象足跟靠近<br>盆骨平行地面（端平）<br>收紧大腿内侧  臀部  股四  目的锁定姿势</p><p>小臂垂直地面，保持杠铃位置，想象把杠铃掰断，目的激活背阔肌<br>深吸一口气，绷紧背部，腹部如同咳嗽一样紧张。</p><p><strong>第三步  下蹲</strong><br>大腿后侧发力，至少下蹲至大腿平行地面（如果站距小，可以蹲深一点），或者开始上背前倾位置，或者脚跟离地位置，或者屁股眨眼位置（可能和关节活动度有关），同时注意保持其他部位紧张。（也可以用用史密斯上学习再做自由重量）<br>底部蹲半秒</p><p><strong>第四步 起立</strong><br>胸臀同步抬高，双脚蹬地，想象用斜方肌把杠铃顶起来，同时缓慢呼气，保持腹部收紧，再吸气。重复</p><p><a href="https://b23.tv/n17QecM">【深蹲保姆级教学！效果好！不受伤！| Jeremy Ethier-哔哩哔哩】 </a></p><h1 id="卧推"><a href="#卧推" class="headerlink" title="卧推"></a>卧推</h1><p><strong>第一步  姿势准备</strong><br>下放到底部双手的距离就是握距（注意小臂垂直地面，大臂和身体45度）<br>身体位置   眼睛在杆子的正下方<br>全脚掌踩实地面</p><p><strong>第二步  全身用力</strong><br>股四发力，踩实地面<br>屁股发力，膝盖左右顶开<br>腋窝 手肘往屁股方向掰，背阔发力（想象再往下拉被弹力带拉住的杠铃）<br>轻微弓起背部<br>手腕打直，四肢朝天花板<br>吸气，收紧核心</p><p><strong>第三步 起杠</strong><br>保持身体收紧<br>利用背阔把杠铃拉到肩膀上面<br>背阔重新发力，想象掰断杠铃</p><p><strong>第四步，下放</strong><br>背发力  收紧肩胛骨，拉下杠铃，到乳头位置，最好碰到乳头（注意小臂垂直地面）</p><p><strong>第五步 上升</strong><br>底部停留半秒<br>股四发力，类似腿伸展，杠铃离胸<br>杠铃回归原来的位置，想象两个二头肌靠近贴近（肩部不要往前圆，二头挤向腋窝）</p><p><strong>重复</strong></p><p><a href="https://b23.tv/DRfrj3q">【卧推保姆级教学！效果好！不受伤！| Jeremy Ethier-哔哩哔哩】</a></p><h1 id="硬拉"><a href="#硬拉" class="headerlink" title="硬拉"></a>硬拉</h1><p>to do list</p><ul><li><input disabled type="checkbox"> <a href="https://b23.tv/NI7lh8j">【硬拉保姆级教学！效果好！不受伤！| Jeremy Ethier-哔哩哔哩】 </a></li></ul>]]></content>
    
    
    <categories>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-零碎知识</title>
    <link href="/2023/11/20/%E5%81%A5%E8%BA%AB/0-%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/11/20/%E5%81%A5%E8%BA%AB/0-%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="腰部问题"><a href="#腰部问题" class="headerlink" title="腰部问题"></a>腰部问题</h1><h2 id="腰部力量加强"><a href="#腰部力量加强" class="headerlink" title="腰部力量加强"></a>腰部力量加强</h2><p>改善腰部问题，需要加强腰部力量，可以在做下肢动作的时候保持脊柱中立不变，如同加了腰带一般，就可以让屁股和大腿用力。用几个动作可以加强。</p><ul><li>小飞燕</li><li>山羊挺身</li><li>reverse hyper 反向腿举，不过健身房很少有这个东西</li></ul><p>to do list</p><ul><li><input disabled type="checkbox"> reverse hyper 健身房没器材，替代品？</li></ul><p>相关链接</p><p><a href="https://zhuanlan.zhihu.com/p/25779273">Reverse hyper-背伤恢复神器？翘臀神器？</a></p><p><a href="http://xhslink.com/jtSzHw">13 【加强腰部肌肉力量，下次用这个动作试试 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 ryGzDJFMH0sz1WO 😆 </a></p><h2 id="核心收紧"><a href="#核心收紧" class="headerlink" title="核心收紧"></a>核心收紧</h2><p>核心收紧前提：腰能挺直，动作活动不能超过关节活动范围。</p><blockquote><p>如果深蹲骨盆眨眼、硬拉抓杠弯腰了，前提不存在，核心收紧也就不存在了。</p><p>因此需要对动作做对应的调整，比如硬拉不要把杠放低，满足前提。后续也要调整关节活动度</p></blockquote><p>感觉：</p><ul><li>咳嗽时腹肌的感觉</li><li>或者用手顶住肚子两侧，再用肚子用力把手指顶出</li></ul><p>核心训练：</p><ul><li>单侧壶铃硬拉、侧面弹力单下蹲，可以找到核心收紧的感觉（B站凯圣王的功能训练）</li></ul><p>腰突训练，<a href="http://xhslink.com/L23jIw">73 【腰出现问题，都可以先从这个开始练起 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 IklOWUwz1sqduqb 😆 </a>，这个和凯圣王的功能训练差不多，</p><p>to do list</p><ul><li><input disabled type="checkbox"> 腰突、腰肌劳损成因、怎么缓解</li><li><input disabled type="checkbox"> 推荐的相关动作目标肌群是什么</li></ul><p>相关链接</p><p><a href="https://www.bilibili.com/video/BV1eG4y1Q7cT/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【功能训练系列】开篇!什么是功能训练，为什么要开发身体功能】</a> 这个是合集</p><p><a href="http://xhslink.com/J5MAHw">80 【找不到核心收紧的感觉，用这个方法试试 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 ZrT6A1WLSCEyewT 😆</a></p><h2 id="硬拉导致腰部疼痛"><a href="#硬拉导致腰部疼痛" class="headerlink" title="硬拉导致腰部疼痛"></a>硬拉导致腰部疼痛</h2><p>腰部动作变形：问题之一。如果体态不良，在抓杠时腰椎弯曲，核心收紧的前提条件也就不存在了，在拉起时，腰部自然承受了过大重量，进而导致腰部疼痛。解决办法：</p><ul><li>宽站距：这样臀部有更大的活动空间，可以下蹲的更深而不会发生腰椎弯曲。类似相扑深蹲了（深蹲也可以用这种方式蹲的更深而不发生骨盆翻转）</li><li>垫高杠铃：可以在保持原有站距的情况下，在身体活动度的范围内抓到杠。</li></ul><blockquote><p>每个人的体态，身材都不一样，需要自己找到符合自己的动作模式</p></blockquote><p>相关链接</p><p><a href="http://xhslink.com/2scoIw">27 【硬拉如果经常腰疼，下次要注意这个细节 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 1lGNF29p6g9pxbk 😆 </a></p><h1 id="动作控制"><a href="#动作控制" class="headerlink" title="动作控制"></a>动作控制</h1><p>向心收缩：肌肉收缩<br>离心收缩：肌肉负重拉长<br>静态收缩：肌肉负重不变</p><p>举不上来可以停住，静态收缩 &gt; 向心力量。<br>可以落下来但是停不住，离心力量 &gt; 收缩力量</p><p>对于向心收缩来说，慢慢收缩肌肉发力就少，快速收缩肌肉发力就多。<br>对于离心收缩来说，缓慢下落说明负重不沉，肌肉发力不多，快速下落说明负重沉了，肌肉发力多<br>综上，即使离心缓慢控制了，到达了向心收缩力竭，无法举起来了，离心力量还是有很多，任然能控制缓慢下沉。所以对于离心力量来说，重量不够重。所以做动作的时候，快上，稍慢下，流畅即可。目的是向心力竭</p><blockquote><p>感受度&gt;重量，好多人会曲解这个意思，并不是重量不重要，而是在感受度充分的情况下再去考虑重量，两个好处，</p><ol><li>提高神经与肌肉的链接、肌肉控制感</li><li>降低受伤风险。</li></ol></blockquote><hr><p>离心控制 ≠ 离心训练</p><ul><li>离心控制：重量向心离心均可完成，但是在离心阶段缓慢下落。<strong>注意：如果离心阶段需要有控制的下方，不能利用重力过快下放。同时如果离心阶段过于缓慢，反而会导致肌肉更早酸痛，进而影响向心，进而影响</strong></li><li>离心训练：向心的重量无法完成，直接进行离心的部分，才叫离心训练。这样可以利用更大的离心力量给肌肉更大的刺激。</li></ul><p>比如引体向心阶段无法完成，说明向心力量不足，可以利用离心锻炼</p><p>向心力量达到力竭，离心可能还未达到。肌肉增长最主要因素是<strong>力学张力</strong>而不是肌肉酸痛</p><p>to do list</p><ul><li><input disabled type="checkbox"> 离心训练的作用</li><li><input disabled type="checkbox"> 训练感受度与离心训练</li><li><input disabled type="checkbox"> 力学张力，百度</li><li><input disabled type="checkbox"> <strong>还没看！！</strong><a href="https://vintraining.medium.com/%E8%82%8C%E8%82%89%E6%88%90%E9%95%B7%E4%B8%89%E5%A4%A7%E5%9B%A0%E7%B4%A0-%E6%A9%9F%E6%A2%B0%E5%BC%B5%E5%8A%9B-%E4%BB%A3%E8%AC%9D%E5%A3%93%E5%8A%9B-%E8%82%8C%E8%82%89%E6%90%8D%E5%82%B7-%E4%BB%8D%E7%84%B6%E6%88%90%E7%AB%8B%E5%97%8E-2b2247ce741a">肌肉成長三大因素：機械張力、代謝壓力、肌肉損傷······是什麼＆仍然成立嗎？</a></li></ul><p>相关链接</p><p><a href="http://xhslink.com/XvijIw">61 【健身训练要快还是要慢？看看这里的具体考虑 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 BRXd44dZQmBB9M5 😆 </a></p><p><a href="http://xhslink.com/TWucIw">29 【分辨好离心控制和离心训练，做高效健身训练 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 2cmNmnA4LfQaYVq 😆 </a></p><h1 id="腿部问题"><a href="#腿部问题" class="headerlink" title="腿部问题"></a>腿部问题</h1><h2 id="深蹲屁股歪"><a href="#深蹲屁股歪" class="headerlink" title="深蹲屁股歪"></a>深蹲屁股歪</h2><p>哪边动作开始变形，哪边力量弱。比如卧推，哪个手臂开肘，表示对应的手臂薄弱。</p><p>深蹲上，需要先处理灵活性差异，再处理力量差异</p><ol><li>首先用叶问蹲（单腿深蹲）看灵活性差异，不稳定甚至膝盖内扣等动作发生，则该一侧为薄弱。需要先解决灵活性问题。放松大小腿后侧肌肉，大腿内侧肌肉</li><li>然后使用后抬腿下蹲，下蹲费力侧则力量较差。单独加强对应腿前侧力量即可</li><li>最后可以尝试深蹲了</li></ol><p><a href="http://xhslink.com/1kCkIw">54 【深蹲时候会歪，就用这两个动作方案解决 - 北京力量教练舒雨帆 | 小红书 - 你的生活指南】 😆 JkWngZ6wLFIf1D6 😆 </a></p>]]></content>
    
    
    <categories>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-从0开始学炒股-观感</title>
    <link href="/2023/11/17/%E4%BA%A4%E6%98%93/1-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E7%82%92%E8%82%A1-%E8%A7%82%E6%84%9F/"/>
    <url>/2023/11/17/%E4%BA%A4%E6%98%93/1-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E7%82%92%E8%82%A1-%E8%A7%82%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>这本书是一个付费交易课上一个老师推荐的。比较入门，就看了一下，微信读书上就可以看。</p><ol><li><p>先告诉你一些概念和定义，比如说基本知识、指数、股票划分、术语。</p></li><li><p>然后一张一张截图告诉你怎么安装炒股软件，怎么开户（PC 和手机端）</p></li><li><p>怎么根据基本、心理、技术面、市场面选股，软件上怎么选股</p></li><li><p>涨跌分析，趋势分析。主要根据基本面和技术面</p><ol><li>基本面：宏观、行业、公司</li><li>技术面：K线、趋势线、形态、各种指标</li></ol></li><li><p>盘口，这里主要是买卖盘和量能</p></li><li><p>利用K线识别底部，顶部</p></li></ol><p>这本书很入门，里面涉及的知识点在网上都可以找到，相当于零碎的知识的整合版。K线的八种形态，更像是两个维度的排列组合。举了一些例子，更像是刻舟求剑，并没有反例，过一下大概就好，讲的东西大概都是知道的</p>]]></content>
    
    
    <categories>
      
      <category>交易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程式事务+aop</title>
    <link href="/2023/11/15/Spring/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1+aop/"/>
    <url>/2023/11/15/Spring/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1+aop/</url>
    
    <content type="html"><![CDATA[<h1 id="涉及知识点链接"><a href="#涉及知识点链接" class="headerlink" title="涉及知识点链接"></a>涉及知识点链接</h1><p><a href="https://blog.csdn.net/yanwenwennihao/article/details/126540981">Spring事务注解</a>（隔离级别中的解释是错误的）</p><p><a href="https://blog.csdn.net/qq_40991313/article/details/126339270">【Java笔记+踩坑】Spring基础3——AOP，事务管理</a>（基本相当于视频的文字版和跟操版，对于已经知道的知识点会有点啰嗦，可以只看小结）</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于游戏采用滚服的方式，所以有多个数据库，在配置礼包时，需要全服配置，如果发生异常，需要进行数据回滚，由于存在多个数据源，无法使用 Spring 提供的事务注解，需要自定义实现</p><p>项目使用原生的 JdbcTemplate 方式，所以可以通过 JdbcTemplate 拿到 DataSource 进行事务操作</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="声明注解"><a href="#声明注解" class="headerlink" title="声明注解"></a>声明注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.manager.biz.aop.data;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * game 事务注解，默认解析第一个参数作为事务源（jdbcTemplate）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTransactional &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定义AOP"><a href="#定义AOP" class="headerlink" title="定义AOP"></a>定义AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.manager.biz.aop;<br><br><span class="hljs-keyword">import</span> com.manager.biz.bean.CustomerException;<br><span class="hljs-keyword">import</span> com.manager.biz.bean.WebErrorCode;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.transaction.TransactionStatus;<br><span class="hljs-keyword">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by wuyufan on 2023/11/15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTransactionalAop</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MyTransactionalAop.class);<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.manager.biz.aop.data.MyTransactional)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;cut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 获取方法参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span> (args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_服务器参数为空);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || obj.getClass() != JdbcTemplate.class) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_服务器参数为空);<br>        &#125;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> (JdbcTemplate) obj;<br><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> jdbcTemplate.getDataSource();<br>        <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerException</span>(WebErrorCode.ERROR_数据源不存在);<br>        &#125;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dstm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>        <span class="hljs-comment">// TransactionStatus不能再提交或回滚时在生成，这样会导致事物失效</span><br>        <span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> dstm.getTransaction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTransactionDefinition</span>());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行</span><br>            result = joinPoint.proceed(args);<br>            <span class="hljs-comment">// 提交事物</span><br>            dstm.commit(status);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-comment">// 回滚事物</span><br>            log.error(<span class="hljs-string">&quot;回滚事务，异常&quot;</span> + e.getCause());<br>            dstm.rollback(status);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyTransactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">xxx</span><span class="hljs-params">(JdbcTemplate jdbcTemplate, Object... objs)</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-4-438.找到字符串中所有字母异位词</title>
    <link href="/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-4-438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-4-438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438.找到字符串中所有字母异位词</a></p><h1 id="固定窗口-哈希表"><a href="#固定窗口-哈希表" class="headerlink" title="固定窗口+哈希表"></a>固定窗口+哈希表</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span>[] subConut = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-type">int</span>[] pConut = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br><br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">findAnagrams</span><span class="hljs-params">(String s, String p)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (s.length() &lt; p.length()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化窗口 + 统计 p 字符出现个数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; p.length() ;i++) &#123;<br>            subConut[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            pConut[p.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断第一次窗口是否相等</span><br>        List&lt;Integer&gt; rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (Arrays.equals(subConut, pConut)) &#123;<br>            rs.add(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length() - p.length();i++) &#123;<br>            <span class="hljs-comment">// 移动窗口</span><br>            subConut[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>            subConut[s.charAt(i + p.length()) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            <span class="hljs-comment">// 满足结果</span><br>            <span class="hljs-keyword">if</span> (Arrays.equals(subConut, pConut)) &#123;<br>                rs.add(i + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>哈希表可以换成字符串排序，代码就不写了</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-3-49.字母异位词分组</title>
    <link href="/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-3-49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <url>/2023/11/15/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-3-49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></p><p>直接看官方的第二种解法就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; strs.length; ++i) &#123;<br>            <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> strs[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; str.length(); ++j) &#123;<br>                ++arr[str.charAt(j) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] != <span class="hljs-number">0</span>) &#123;<br>                    sb.append((<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;a&#x27;</span> + j)).append(arr[j]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> sb.toString();<br>            List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>            list.add(str);<br>            map.put(key, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(map.values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-2-383.赎金信</title>
    <link href="/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-2-383.%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
    <url>/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-2-383.%E8%B5%8E%E9%87%91%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/ransom-note/">力扣题目链接</a></p><p>和上道题一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canConstruct</span><span class="hljs-params">(String ransomNote, String magazine)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ransomNote.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ransomNote.charAt(i);<br>            map.put(c, map.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; magazine.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> magazine.charAt(i);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> map.get(c);<br>            <span class="hljs-keyword">if</span> (cc == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 提供的不需要</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            --cc;<br>            <span class="hljs-keyword">if</span> (cc == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 足够</span><br>                map.remove(c);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cc &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 还需要</span><br>                map.put(c, cc);<br>            &#125;<br>            <span class="hljs-comment">// 多余提供，不管</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> map.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2-1-242.有效的字母异位词</title>
    <link href="/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-1-242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2023/11/14/%E7%AE%97%E6%B3%95/3-%E5%93%88%E5%B8%8C%E8%A1%A8/2-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/3-2-1-242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接</a></p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>使用内置 map 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            map.put(c, map.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> t.charAt(i);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> map.getOrDefault(c, <span class="hljs-number">0</span>) - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cc != <span class="hljs-number">0</span>) &#123;<br>                map.put(c, cc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.remove(c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看题目上，可以使用数组实现，ASCII 编码上最长 26，所以可以使用数组实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>            ++arr[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); ++i) &#123;<br>            --arr[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>3-哈希表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表总结</title>
    <link href="/2023/11/13/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/13/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这个章节可以用几个方法总结</p><ol><li>头尾加虚拟节点做哨兵，方便头尾操作</li><li>遍历的过程中经常会用到双指针，在操作的过程中，如果需要操作指针，需要注意保存下一节点</li><li>部分题目涉及数学问题，如链表相交，是否有环等</li></ol>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-我的BTC历程</title>
    <link href="/2023/11/10/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/1-%E6%88%91%E7%9A%84BTC%E5%8E%86%E7%A8%8B/"/>
    <url>/2023/11/10/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/1-%E6%88%91%E7%9A%84BTC%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>从2021年5月开始接触的吧，下面事情发生的顺序有点忘了，按照印象随便聊聊吧</p><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>我第一次听到是显卡价格暴涨，忘记大几了，懵懵懂懂。当时同学 A 从十四楼匆忙跑下来找同学 B，说显卡涨了快一倍，就挂咸鱼，很快就有人线下把他买走了，用了好几年还能涨价卖，赚爆了。那时候比特币大概是六万？反正快到第一次顶了。</p><hr><p>不知道过了多久，奇亚币（chia）抄的挺火的，概念是用硬盘挖矿，也就导致硬盘价格暴涨，国内大硬盘缺货，只有亚马逊上有，但是运过来需要时间。此时同学 B 和同学 C 在讨论，要不要凑钱从亚马逊上直接买几个硬盘，期间找商家直接卖出去，按照现在的价格稳赚几百，他们看到我说：“老吴要不要来，亏的算 B 的“，我想着这种好事，直接干啊！</p><p>我们三个建了群，扯点有的没的，因为我对这个不了解，但是大多都是他们在说话，我听他们说。</p><hr><p>计划顺利进行，N 天后，几百块的收益就到手了。随后好像硬盘的价格一路下跌。某天，看到他的支付宝余额十万，怀疑我数错了，又数了两遍，确实十万</p><blockquote><p>还没毕业就达到我毕业一两年的水平，确实厉害，信息获取也比我迅速</p></blockquote><p>这个时期给我的感觉是，他们怎么知道的这些信息，也许B站，也许外网的几个 up，也许其他渠道，我都不得而知，他们只是说，我也是听说的，不了了之，并没有完整的认知链条，也就暂告一段落了</p><h1 id="第一次触碰"><a href="#第一次触碰" class="headerlink" title="第一次触碰"></a>第一次触碰</h1><p>再后来，doge，pig，shib 火了，涨幅惊人，同学 C 又过来和 B 扯，此时我好奇的问哪里买，不知道从哪里了解到火币网，根据自己摸索找到了入门投资方式，果然韭菜入门还是简单的。同学 B 让我注意风险，我说没事，就两百，我有红线。</p><p>其实就是初生牛犊不怕虎，这个时候的我连基金都玩不明白，股票都没碰过，直接摸数字货币，还加上了五倍合约，合约的规则都没明白，虽然说没事，但是心里还是很害怕的，怕一下子亏没</p><hr><p>投资一开始，还是有点收益的，三个点，五个点，卖了，来钱之快，大大出乎我的意料，买…..卖…..买…..卖，但是每次都是蚂蚁仓，总是在想一次暴富岂不是很爽。</p><p>随后发生 519，比特币暴跌，腰斩到三万，其实这是个很好进入的机会，但是害怕继续往下跌，全都没了。如果按照现在的知识来看，极速下跌，极速插针，反而要胆大进入，因为不可能直接到达目标位置。在下跌的过程中，因为我的仓位很小很小，所以并没有造成过多的亏损，后续的反弹也并不清楚大概的理论反弹点位，也就贯彻了这个心理。</p><hr><p>后面不知道什么时候，同学 B 把我踢了，有点生气，因为群里就三个人，不至于，最多不说话就行了。</p><hr><p>反弹结束，比特币这时候发生第一次大跌，影响情绪，退出了</p><p>这个阶段说不上亏损，也说不上收益，但是也就几十块钱的波动，导致我一直看收益，半个小时内看好几次，非常影响其他事情。不得不感叹金钱的魔力</p><h1 id="第二次触碰"><a href="#第二次触碰" class="headerlink" title="第二次触碰"></a>第二次触碰</h1><p>再后面开始实习了，比特币又开始上涨，也就有了念头</p><p>不知道怎么的了解到了其他平台 okex，在官方群认识了富婆 F，也加了几个人，一起组建了一个群，他们侃侃而谈，炫耀收益、炫耀资源、骂庄家，总体给我的感觉听风就是雨，反而影响我的情绪，不过里面有两个看起来有点东西的人  D 和 E，D 是信息面分析，而且有点小钱，E 是技术面，我也会跟着他们两个下单，分析相对比较准确。问他们怎么做到的，回复：“直觉”，也是，这种事情就算知道也不能和别人说</p><p>之前就有听说过杀猪群的案例，一直对他们保持警惕。后来 D 和 E 在群里说 GM 币，说怎么怎么牛逼怎么怎么厉害，群里挺多人跟了，全部都被活埋。而我因为谨慎又一次幸免，期间被嘲笑，又灌输什么概念，有一次有点动摇的说实话。</p><p>再后面比特币又大跌，基金大跌，纳斯达克指数大跌，打击情绪，也就懒得看了，群也退了。</p><p>为了避免更大的亏损，也去学习了一些交易相关的知识，均线、双均线、RSI、MACD、蜡烛图、支撑阻力位、移动止损止盈、仓位管理、顺势交易等等，确实学到了挺多，能看懂了一些，但是没有非常系统的知识系统，也不知道怎么把这些知识融入到实战之中，更多靠感觉，并且很久才有一次行情，更多要靠回测，挺磨人心态的，有时候感觉对了也不太敢下单，这个阶段大概持续到我实习结束。总的来说不怎么亏也不怎么赚，也不知道哪些做法是对的</p><h1 id="第三次触碰"><a href="#第三次触碰" class="headerlink" title="第三次触碰"></a>第三次触碰</h1><p>我一直在想，如果有自动交易，根据某种规则执行策略，丢一点小钱进去运行，没问题的话再丢大前就好了。恰巧此时，币安推出了跟单交易员。一开始用这个功能还挺不错的，一开始可以赚到 1k - 2k。在持续两周的运行以及部分指标的考究下，确认安全没问题，就开始投入更多的资金，最高达到了七千。</p><p>之后行情发生日线级别的回调，所有运行策略都发生大规模的亏损，无论等比还是等额跟单，都接连爆仓，七千尽数亏损</p><p>内心并没有很大波动，我就把大多数软件卸载了，失败退出。</p><p>在前几次的触碰中，导致这种原因都是同一个，对交易市场的认知还不够明确，也可以说长进不大。包括入场出场时机、出入场理由、止盈止损、仓位、心态，都没有一套自己的方法论。期间虽然有看书，但是并没有应用于实战，并且书只是走马观花，当然也和不合适的入门阶段有关，同时也没有相关人带领等原因的综合影响，导致了这次结果。</p><p>期间虽然加过一个群，给我讲过叠 buff 的方法论，但是仅限于使用，和浅显认知。也问过他们学习的方式，看书，看书，还是看书</p><h1 id="第四次触碰"><a href="#第四次触碰" class="headerlink" title="第四次触碰"></a>第四次触碰</h1><p>但是追求是不上班，通过网络，要么售卖服务、要么售卖知识、要么股票交易、要么自媒体等等</p><p>BTC 交易是我其中的一个尝试，这次需要为系统的知识付费，付时间，以更加稳健的方式</p><p>现在，我又投了一百，五倍杠杆</p><hr><p>就这样吧，随便写写，也不讲顺序和逻辑了</p>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易</tag>
      
      <tag>虚拟货币</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-7-142.环形链表II</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-7-142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-7-142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p><h1 id="思路-实现"><a href="#思路-实现" class="headerlink" title="思路&amp;实现"></a>思路&amp;实现</h1><p>和链表相交的思路类似</p><h2 id="暂存地址"><a href="#暂存地址" class="headerlink" title="暂存地址"></a>暂存地址</h2><p>这里暂存使用哈希表的 set 实现，一旦出现同一个地址，就是说明有环，并且是入环口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        HashSet&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(cur)) &#123;<br>                <span class="hljs-keyword">return</span> cur;<br>            &#125; <br>            set.add(cur);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="这是一个数学题"><a href="#这是一个数学题" class="headerlink" title="这是一个数学题"></a>这是一个数学题</h2><p><a href="https://www.bilibili.com/video/BV1if4y1d7ob/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【把环形链表讲清楚！ 如何判断环形链表？如何找到环形链表的入口？ LeetCode：142.环形链表II】 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (slow.next != <span class="hljs-literal">null</span> <br>                &amp;&amp; fast.next != <span class="hljs-literal">null</span> <br>                &amp;&amp; fast.next.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> slow;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-keyword">while</span> (a != b) &#123;<br>                    a = a.next;<br>                    b = b.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> a;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-6-面试题_02.07.链表相交</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-6-%E9%9D%A2%E8%AF%95%E9%A2%98_02.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-6-%E9%9D%A2%E8%AF%95%E9%A2%98_02.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>两种方法：</p><ol><li>把 A 链表地址存下，再遍历 B 链表逐个比较，相同就返回。代码简单就不写了</li><li>双指针，双遍历。这里需要分类讨论<ul><li>如果相交<ul><li>假设两个链表分别为 a,b<br>a.length &#x3D; a1 + a2<br>b.length &#x3D; b1 + b2<br>当 a b 在 c 处相交时，a2 &#x3D;&#x3D; b2，即<br>a.length &#x3D; a1 + c<br>b.length &#x3D; b1 + c<br>当 a 遍历完走 b，b 遍历完走 a，他们的长度为<br>a：a1 + c + b1 + c<br>b：b1 + c + a1 + c<br>如果 a1 &#x3D;&#x3D; b1，第一个 c 就相遇<br>如果 a1 !&#x3D; b1，第二个 c 相遇<br>所以，当他们走完对方的独立长度时，就是二者相交点</li></ul></li><li>如果不相交<ul><li>遍历两次都找不到公共点</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpA</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpB</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tmpA == tmpB) &#123;<br>                <span class="hljs-keyword">return</span> tmpA;<br>            &#125;<br>            tmpA = tmpA.next;<br>            tmpB = tmpB.next;<br>            <span class="hljs-keyword">if</span> (tmpB == <span class="hljs-literal">null</span>) &#123;<br>                tmpB = headA;<br>                ++n;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (tmpA == <span class="hljs-literal">null</span>) &#123;<br>                tmpA = headB;<br>                ++n;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题目给我的感觉，优化方案更像是数学题，能想到就很简单，想不到就死活做不出来</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-5-19.删除链表的倒数第N个节点</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-5-19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-5-19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></p><p>直接看官方第三种解题方式即可</p><p>官方一共有三种方法：</p><ol><li>先计算出总数，而后再次遍历到所需要删除的节点，代码简单，懒得写了</li><li>遍历时放入栈，而后依次弹出即可，也简单，不写</li><li>快慢指针方式，快指针先走 n 格，而后快慢指针同时走</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        newHead.next = head;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            tmp = tmp.next;<br>            --n;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (tmp.next != <span class="hljs-literal">null</span>) &#123;<br>            cur = cur.next;<br>            tmp = tmp.next;<br>        &#125;<br>        cur.next = cur.next.next;<br>        <span class="hljs-keyword">return</span> newHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-4-24.两两交换链表中的节点</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-4-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-4-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">力扣题目链接</a></p><p>题目的思想和反转链表类似</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里也可以用递归方式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        newHead.next = head;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> newHead;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> cur.next;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a.next;<br>            a.next = b.next;<br>            b.next = a;<br>            cur.next = b;<br>            cur = cur.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-3-206.反转链表</title>
    <link href="/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-3-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/11/09/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-3-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/reverse-linked-list/">力扣题目链接</a></p><p><a href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">翻转链表</a></p><h1 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h1><p>题目解释有问题，应该用三个指针</p><p>pre    cur    next</p><p>由于 cur.next 转向 pre，原本 next 数值丢失，需要暂存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 循环方式</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 递归方式    </span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-literal">null</span>, head);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode pre, ListNode cur)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> pre;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        <span class="hljs-keyword">return</span> reverse(cur, tmp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-2-707.设计链表</title>
    <link href="/2023/11/08/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-2-707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/11/08/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-2-707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html#%E6%80%9D%E8%B7%AF">代码随想录-涉及链表</a></p><p><a href="https://leetcode.cn/problems/design-linked-list/">力扣题目链接</a></p><p>直接看官方最优答案的解释：前后加两个哨兵节点，size 可以加快处理速度</p><p>需要注意的是索引下标从 0 开始</p><ul><li>新增插入到 index &#x3D; n 的前面</li><li>新增的边界处理：0 &gt; index || index &gt; size  无意义</li><li>删除&amp;查询的边界处理：0 &lt;&#x3D; index &lt; size</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-keyword">private</span> Node head; <span class="hljs-comment">// 头节点</span><br>    <span class="hljs-keyword">private</span> Node tail; <span class="hljs-comment">// 尾节点，初始化/增/删 都需要考虑尾指针</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// 大小，从 1 开始，注意索引从 0 开始</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> Node pre;<br>        <span class="hljs-keyword">public</span> Node next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> val;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>        head.next = tail;<br>        tail.pre = head;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        prin(<span class="hljs-string">&quot;get&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!check(index)) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp.val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>        tmp.next.pre = newNode;<br>        newNode.next = tmp.next;<br>        tmp.next = newNode;<br>        newNode.pre = tmp;<br>        ++size;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!check(index)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; ++i) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        tmp.next.next.pre = tmp;<br>        tmp.next = tmp.next.next;<br>        --size;<br>    &#125;<br><br>    <span class="hljs-comment">// 是否合法区域</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prin</span><span class="hljs-params">(String addr)</span> &#123;<br>        System.out.println(addr + <span class="hljs-string">&quot; ============  -- size = &quot;</span> + size);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> head; tmp != <span class="hljs-literal">null</span>; tmp = tmp.next) &#123;<br>            System.out.println(index + <span class="hljs-string">&quot; +++&gt; &quot;</span>+ tmp.val);<br>            ++index;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> tail; tmp != <span class="hljs-literal">null</span>; tmp = tmp.pre) &#123;<br>            System.out.println(index + <span class="hljs-string">&quot; ---&gt; &quot;</span>+ tmp.val);<br>            ++index2;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj.get(index);</span><br><span class="hljs-comment"> * obj.addAtHead(val);</span><br><span class="hljs-comment"> * obj.addAtTail(val);</span><br><span class="hljs-comment"> * obj.addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj.deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-1-203.移除链表元素</title>
    <link href="/2023/11/03/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-1-203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <url>/2023/11/03/%E7%AE%97%E6%B3%95/2-%E9%93%BE%E8%A1%A8/2-1-203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">力扣题目链接</a></p><p><a href="https://www.bilibili.com/video/BV18B4y1s7R9">链表基础操作| LeetCode：203.移除链表元素 (opens new window)</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>注意删除指针的时候不需要移动 next 节点就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> h;<br>        <span class="hljs-keyword">while</span> (tmp.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tmp.next.val == val) &#123;<br>                tmp.next = tmp.next.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp = tmp.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> h.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>2-链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组总结</title>
    <link href="/2023/11/03/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/03/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h1><p>数组在底层中是顺序存储，只需要存起始地址和每个空间的长度即可计算目标值，所以查找快。</p><p>但是对于数据的删除需要逐个覆盖，删除 index &#x3D; n 的位置，[n+1, length) 的区间都要往前移动一次，所以删除慢</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>对于数组中查找元素，可以考虑先排序，再利用二分查找 O(logn) 级别的。</p><blockquote><p>注意 O(logn) 在数量比较少时，速度比 O(n^2^) 要慢，所以并不是前者一定好</p></blockquote><h1 id="题解算法"><a href="#题解算法" class="headerlink" title="题解算法"></a>题解算法</h1><h2 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h2><p>在进行二分查找时，可以利用两个指针 ab，分别指向左右边界，每次逐步缩减。同时，还可利用二分找数值、边界等等，在处理边界的过程中还可进行其他操作。</p><p>有时候可以从后往前遍历更简单</p><ul><li>多层循环也可看成多级指针。</li><li>左右边界</li><li>快慢指针</li><li>滑动窗口</li></ul><p>在处理的过程中要注意边界条件的处理，当一开始的区间确定了，后面的边界也就随之确定。在螺旋矩阵中，特别容易出错。</p><p>滑动窗口可以看成是一类题型的模板，<strong>找到满足xxx区间的最x的区间（子串，子区间，子数组）</strong>，直接套就好</p><p>期间解决了一道困难题，实际这种题并不困难，只是需要处理的细节、边界条件、代码熟练度有一点点要求，所以容易出错，需要花费一点时间调试，同时由于没有代码提示，所以对代码熟练度，常用方法会有一点考验</p><p>同时，工作中的项目也需要考虑挺多细节，在做题的过程中也有体现出来，可以作为工作中的过渡</p><p>题目还要刷多两三遍，会记得更深刻一些</p><p>叭叭叭叭叭叭叭叭……先到这</p><hr><p>在写题解的过程中，尤其是滑动窗口，发现几乎完全套用的方式，也没有任何理由或原理，下面引用一下知乎的回答（为什么滑动窗口是正确的？）</p><p>总结：先有题目，再有方法，然后出现题目的变式，方法的变式。从答案问为什么答案是对的，这个问题本身就不对</p><blockquote><p>我想了好一会儿想不出该怎么回答这个问题，总感觉怪怪的，然后终于意识到其实你这个提问本身就很微妙。</p><p>滑动窗口算法只是一种算<em>法</em>。一种“方法”。它指导你以某种思路做事。它没有对错可言。</p><p>而任何一个具体的题目，是否适用滑动窗口算法，那是另一码事。</p><p>举个例子，我给出一个叫做“求助旁边的人”的方法，你能脱离要解决的问题去聊这个“方法”的对错吗？</p><p>对于一些问题，滑动窗口算法适用，于是适用滑动窗口算法求解正确。</p><p>对于另一些问题，滑动窗口算法就会不适用，或者至少需要一些额外改进、只用滑动窗口算法自然就会遗漏掉一些情况。</p><p>滑动窗口算法所能解决的最经典的问题，你大概在了解这个词的时候就已经一并知道了。比如定长连续最大和问题。但是那个问题我觉得正常情况下都不会觉得“有遗漏”的。毕竟原理超级简单，而且题目对于算法基本就是“量身定做”的，完全没有反直觉要素，这问题交给没有编程基础的人去做人工枚举基本也是这么个做法。</p><p>而你所疑惑的很可能就是需要变体&#x2F;改进型&#x2F;多维的滑动窗口算法的东西了……但这要给你解释它为什么是正确的（或者换个说法，为什么是适用的），我起码得知道题目是什么（摊手）。</p><p>作者：虚境<br>链接：<a href="https://www.zhihu.com/question/601659082/answer/3033665122">https://www.zhihu.com/question/601659082/answer/3033665122</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>1-数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-4-2-54.螺旋矩阵</title>
    <link href="/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-2-54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-2-54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>和上一道题差不多，注意各个边界处理</p><p>x1…….x2</p><p>……………</p><p>y1……..y2</p><p>但是这里需要调整一下</p><ul><li>上边界处理 x1   x2</li><li>右边界处理   y2</li><li>下边界不处理</li><li>左边界处理   y1</li></ul><p>同时要考虑只有一行或一列的情况，如果分开处理就复杂了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">spiralOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        List&lt;Integer&gt; rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">// 以最小的边界作为循环条件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastX</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length - t - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastY</span> <span class="hljs-operator">=</span> matrix.length - t - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (t &lt;= lastX &amp;&amp; t &lt;= lastY) &#123;<br>            <span class="hljs-comment">// 上边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> t; i &lt;= lastX; ++i) &#123; <span class="hljs-comment">// 增加临界情况处理，[x,y]</span><br>                rs.add(matrix[t][i]);<br>            &#125;<br>            <span class="hljs-comment">// 右边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> t + <span class="hljs-number">1</span>; j &lt;= lastY; ++j) &#123; <span class="hljs-comment">// 增加临界情况处理 (y,x)</span><br>                rs.add(matrix[j][lastX]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t &lt; lastX &amp;&amp; t &lt; lastY) &#123; <span class="hljs-comment">// 处理只有一行或一列的情况</span><br>                <span class="hljs-comment">// 下边界</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lastX - <span class="hljs-number">1</span>; i &gt; t; --i) &#123; <span class="hljs-comment">// 去除临界情况处理 [x,y)</span><br>                    rs.add(matrix[lastY][i]);<br>                &#125;<br>                <span class="hljs-comment">// 左边界</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> lastY; j &gt; t; --j) &#123; <span class="hljs-comment">// [y,x)</span><br>                    rs.add(matrix[j][t]);<br>                &#125;<br>            &#125;<br>            ++t;<br>            --lastX;<br>            --lastY;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>4-螺旋矩阵</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-4-1-59.螺旋矩阵</title>
    <link href="/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-1-59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2023/11/02/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/4-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/1-4-1-59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">59.螺旋矩阵II</a></p><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣题目链接</a></p><p><a href="https://www.bilibili.com/video/BV1SL4y1N7mV">拿下螺旋矩阵！LeetCode：59.螺旋矩阵II</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>转圈圈，注意每个边界条件统一，方便处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[][] rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前计算次数</span><br>        <span class="hljs-comment">// 循环次数：每次循环处理两个边界，所以 n / 2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mid; i++) &#123;<br>            <span class="hljs-comment">// 边界处理，包左不包右</span><br>            <span class="hljs-comment">// i:近端边界，last远端边界</span><br>            <span class="hljs-comment">// ii j 各自计算的边界，为了方便识别，ii 表示横坐标计算，j 表示纵坐标计算</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> n - i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 上边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> + i; j &lt; last; j++) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[i][j] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 右边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> + i; ii &lt; last; ii++) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[ii][last] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 下边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> last; j &gt; i; j--) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[last][j] = cur;<br>                ++cur;<br>            &#125;<br>            <span class="hljs-comment">// 左边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> last; ii &gt; i; ii--) &#123; <span class="hljs-comment">// 横坐标右移</span><br>                rs[ii][i] = cur;<br>                ++cur;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            rs[mid][mid] = cur;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>4-螺旋矩阵</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-3-76.最小覆盖子串</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-3-76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-3-76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></p><p><a href="https://www.bilibili.com/video/BV1Zd4y117AT/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【LeetCode 76｜最小覆盖子串｜滑动窗口｜双指针｜经典困难题快来挑战呀】 </a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>还是套用滑动窗口的模板，但是多了字符记录的map，收缩扩容的记录条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 所需要的字符统计</span><br>    HashMap&lt;Integer, Integer&gt; ori = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 实际出现的字符统计</span><br>    HashMap&lt;Integer, Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansL</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span> - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 统计字符出现个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> t.charAt(i);<br>            ori.put(c, ori.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (r &lt; s.length()) &#123;<br>            <span class="hljs-comment">// 移动右窗口添加元素，统计</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(r);<br>            <span class="hljs-keyword">if</span> (ori.containsKey(c)) &#123;<br>                cnt.put(c, cnt.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 检查是否满足题目要求，如果满足，记录结果，移除记录窗口中的元素，移动左窗口调整</span><br>            <span class="hljs-keyword">while</span> (check()) &#123;<br>                <span class="hljs-keyword">if</span> ((ansR - ansL) &gt; (r - l)) &#123;<br>                    ansL = l;<br>                    ansR = r;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> s.charAt(l);<br>                <span class="hljs-keyword">if</span> (ori.containsKey(cc)) &#123;<br>                    cnt.put(cc, cnt.get(cc) - <span class="hljs-number">1</span>);<br>                &#125;<br>                ++l;<br>            &#125;<br>            ++r;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ansL == -<span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : s.substring(ansL, ansR+<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断进入窗口的字符是否大于等于所需的字符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iter</span> <span class="hljs-operator">=</span> ori.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) iter.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) entry.getKey();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) entry.getValue();<br>            <span class="hljs-comment">// 存在，一个所需字符大于统计字符，跳出</span><br>            <span class="hljs-keyword">if</span> (cnt.getOrDefault(key, <span class="hljs-number">0</span>) &lt; value) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码还有优化的地方，扩容的时候顺便记录关键字符的对应下标，收缩的时候直接根据下标直接收缩</p>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-2-904.水果成篮</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-2-904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-2-904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://www.bilibili.com/video/BV1hG4y1n7xt/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【力扣（LeetCode） 每日一题 904. 水果成篮   2022-10-17  双指针算法】 </a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>窗口右移加入元素，不满足题目条件时调整左窗口至满足条件，记录长度，直到链表末尾，返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalFruit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] fruits)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (r &lt; fruits.length) &#123;<br>            <span class="hljs-comment">// 添加元素</span><br>            map.put(fruits[r], map.getOrDefault(fruits[r], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 元素不满足条件，调整至符合条件</span><br>            <span class="hljs-keyword">while</span> (map.size() &gt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">di</span> <span class="hljs-operator">=</span> map.get(fruits[l]) - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (di == <span class="hljs-number">0</span>) &#123;<br>                    map.remove(fruits[l]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    map.put(fruits[l], di);<br>                &#125;<br>                ++l;<br>            &#125;<br>            <span class="hljs-comment">// 满足条件，记录大小</span><br>            ans = Math.max(ans, (r - l + <span class="hljs-number">1</span>));<br>            ++r;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3-1-209.长度最小的子数组</title>
    <link href="/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-1-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2023/10/31/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/3-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/1-3-1-209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">解读</a></p><p><a href="https://www.bilibili.com/video/BV1tZ4y1q7XE/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【拿下滑动窗口！ | LeetCode 209 长度最小的子数组】 </a></p><h1 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h1><p>最多走 2n 次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span>;<br>        <span class="hljs-keyword">while</span> (r &lt; nums.length) &#123;<br>            sum += nums[r];<br>            <span class="hljs-comment">// 当累计总和大于目标值。压缩左区间</span><br>            <span class="hljs-keyword">while</span> (sum &gt;= target) &#123;<br>                sum -= nums[l];<br>                rs = Math.min(rs, (r - l + <span class="hljs-number">1</span>));<br>                l++;<br>            &#125;<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-number">0x7fffffff</span> ? <span class="hljs-number">0</span> : rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>3-长度最小的子数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-5-977.有序数组的平方</title>
    <link href="/2023/10/30/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-5-977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <url>/2023/10/30/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-5-977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>题解看官方</p><p>思路：新建一个目标容器存结果，pos 指针从头往后插入。原来的数组可以看成抛物线，双指针分别从两边往中间靠近</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> r;<br><br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rr</span> <span class="hljs-operator">=</span> nums[r] * nums[r];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ll</span> <span class="hljs-operator">=</span> nums[l] * nums[l];<br>            <span class="hljs-keyword">if</span> (rr &gt; ll) &#123;<br>                ans[pos] = rr;<br>                r--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans[pos] = ll;<br>                l++;<br>            &#125; <br>            --pos;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-4-844.比较含退格的字符串</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-4-844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-4-844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></li><li><a href="https://www.bilibili.com/video/BV1954y1Q7dX/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a"> 【Leetcode刷题 844. 比较含退格的字符串 Backspace String Compare】 </a></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backspaceCompare</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> s.length() - <span class="hljs-number">1</span>, ti = t.length() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, tb = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (si &gt;= <span class="hljs-number">0</span> || ti &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 遍历两个字符串</span><br>            <span class="hljs-keyword">while</span> (si &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 先从后往前遍历 s</span><br>                <span class="hljs-keyword">if</span> (s.charAt(si) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123; <span class="hljs-comment">// 遇到 # 累加计数器，同时移动指针</span><br>                    sb++;<br>                    si--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (sb &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 计数器不为0，继续往前移动指针，相当于被删除</span><br>                        si--;<br>                        sb--;<br>                    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 当前字符存在</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (ti &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 再从后往前遍历 t，其他逻辑一样</span><br>                <span class="hljs-keyword">if</span> (t.charAt(ti) == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                    tb++;<br>                    ti--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (tb &gt; <span class="hljs-number">0</span>) &#123;<br>                        ti--;<br>                        tb--;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 遍历存在的最后的字符</span><br>            <span class="hljs-keyword">if</span>(si &gt;= <span class="hljs-number">0</span> &amp;&amp; ti &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(si) != t.charAt(ti)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (si &gt;= <span class="hljs-number">0</span> || ti &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            si--;<br>            ti--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-3-283.移动零</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-3-283.%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-3-283.%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></p><h1 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h1><p>快指针遍历，当遇到不是 0 的元素时，快指针给慢指针赋值，同时移动慢指针。每次遍历都移动快指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[f] != <span class="hljs-number">0</span>) &#123;<br>                nums[s++] = nums[f];<br>            &#125;<br>            f++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (s &lt; nums.length) &#123;<br>            nums[s++] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-2-26.删除有序数组中的重复项</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-2-26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-2-26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></li></ul><h1 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h1><p>遍历数组，如果快指针和慢指针指向的数字相等，则不断移动快指针，直到二者不相等，然后慢指针往后移动一步，将快指针指向的值赋值给慢指针，重复这个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[s] == nums[f]) &#123;<br>                f++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                nums[++s] = nums[f];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2-1-27.移除元素</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-1-27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/2-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/1-2-1-27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://www.bilibili.com/video/BV12A4y1Z7LP/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【数组中移除元素并不容易！ | LeetCode：27. 移除元素】</a></li><li><a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#_27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0">移除元素</a></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>数组的删除元素。实际数组不能删除元素，只能覆盖</li><li>可使用暴力破解的方式，双循环，第一层找到需要删除的元素，第二层循环就开始覆盖</li><li>或者使用快慢指针，快指针遍历，慢指针负责覆盖</li></ul><h1 id="代码实现-双指针"><a href="#代码实现-双指针" class="headerlink" title="代码实现-双指针"></a>代码实现-双指针</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (f &lt; nums.length) &#123;<br>            <span class="hljs-comment">// 快指针遍历，如果不是需要删除的元素，直接覆盖给慢指针</span><br>            <span class="hljs-keyword">if</span> (nums[f] != val) &#123;<br>                nums[l++] = nums[f];<br>            &#125;<br>            f++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>2-移除元素</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-5-367. 有效的完全平方数</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-5-367.%20%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-5-367.%20%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://leetcode.cn/problems/valid-perfect-square/submissions/">题目连接</a></li><li><a href="https://www.bilibili.com/video/BV1pp4y1W7eZ/?p=2&share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【【专题讲解】详细剖析二分查找 leetcode 33 81 367 Search in Rotated Sorted Array】</a></li></ul><h1 id="使用静态变量提前定义"><a href="#使用静态变量提前定义" class="headerlink" title="使用静态变量提前定义"></a>使用静态变量提前定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50000</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> i * i;<br>            <span class="hljs-keyword">if</span> (ii &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 溢出</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            set.add(ii);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.contains(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以把 set 打印出来，容器大小也就 46340，如果使用二分法的话，由于输入的数据最大二十一亿，右边界最多 46340</p><p>同样的注意，m * m 溢出问题</p><h1 id="使用二分搜索"><a href="#使用二分搜索" class="headerlink" title="使用二分搜索"></a>使用二分搜索</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPerfectSquare</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">46340</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> m * m;<br>            <span class="hljs-keyword">if</span> (ret &gt;  num) &#123;<br>                r = m - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; num) &#123;<br>                l = m + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-4-69.x的平方根</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-4-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-4-69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://leetcode.cn/problems/sqrtx/description/">题目连接</a></li><li><a href="https://www.bilibili.com/video/BV1WW411C7YN/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">【花花酱 LeetCode 69 Sqrt(x) - 刷题找工作 EP158】</a></li></ul><h1 id="思路-注意"><a href="#思路-注意" class="headerlink" title="思路 &amp; 注意"></a>思路 &amp; 注意</h1><ul><li>利用二分查找</li><li>注意 int 类型溢出</li><li>最终查找出来的边界必定在 left 和 right 之间，直接取值</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> x;<br><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (middle &gt; x / middle) &#123;<br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (middle &lt; x / middle) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-3-34.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-3-34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2023/10/29/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-3-34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><ul><li><a href="https://programmercarl.com/0035.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html#%E6%80%9D%E8%B7%AF">搜索插入位置</a><ul><li>利用二分法找到左右边界</li></ul></li><li><a href="https://www.bilibili.com/video/BV1wy4y1k76F/?share_source=copy_web&vd_source=577501e0685d20f8a8f1561cac87ce0a">程序员面试经典题，二分搜索一个区间，区间查找 (LeetCode 34)</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;searchL(nums, target), searchR(nums, target)&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找左边界</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchL</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 相等并且符合起始边界，返回</span><br>                <span class="hljs-keyword">if</span> (middle == <span class="hljs-number">0</span> || (nums[middle - <span class="hljs-number">1</span>] != target)) &#123;<br>                    <span class="hljs-keyword">return</span> middle;<br>                &#125;<br>                right = middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找右边界</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchR</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(middle);<br>                <span class="hljs-comment">// 相等并且符合起始边界，返回</span><br>                <span class="hljs-keyword">if</span> ((middle == nums.length - <span class="hljs-number">1</span>) || (nums[middle + <span class="hljs-number">1</span>] &gt; target)) &#123;<br>                    <span class="hljs-keyword">return</span> middle;<br>                &#125;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-2-35.搜索插入位置</title>
    <link href="/2023/10/28/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-2-35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2023/10/28/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-2-35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><p><a href="https://programmercarl.com/0035.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html#%E6%80%9D%E8%B7%AF">搜索插入位置</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] == target) &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1-1-704.二分查找</title>
    <link href="/2023/10/27/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-1-704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/10/27/%E7%AE%97%E6%B3%95/1-%E6%95%B0%E7%BB%84/1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1-1-1-704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录-二分查找</a></p><p><a href="https://www.bilibili.com/video/BV1fA4y1o715/">讲解视频</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>区间判断：根据区间定义后面的判断逻辑，区间定义常见的有两个<ul><li>左闭右开区间（常见的包左不包右）</li><li>左闭右闭区间</li></ul></li><li>int 类型溢出<ul><li>在进行右侧左右边界计算时，如果数组长度超过 11亿，相加会溢出</li></ul></li><li>查找前提，数组有序 &amp;&amp; 元素唯一<ul><li>元素唯一可以做变式，比如区间的边界查找</li></ul></li></ul><h1 id="左闭右开实现"><a href="#左闭右开实现" class="headerlink" title="左闭右开实现"></a>左闭右开实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length; <span class="hljs-comment">// 闭区间，右侧无意义</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] == target) &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="左闭右闭实现"><a href="#左闭右闭实现" class="headerlink" title="左闭右闭实现"></a>左闭右闭实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// 必须是有效区间</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;  <span class="hljs-comment">// [1, 1] 区间有意义</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 计算右侧的两个边界容易溢出</span><br>            <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码随想录-算法</category>
      
      <category>leetcode</category>
      
      <category>1-数组</category>
      
      <category>1-二分查找</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+Fluid博客搭建</title>
    <link href="/2023/10/27/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/0-hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/10/27/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/0-hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="网站框架"><a href="#网站框架" class="headerlink" title="网站框架"></a>网站框架</h2><p>hexo 是网站框架，可以不用一行代码就构建出自己的个人网站，可以记录文章，因此可作为博客，同样的还有 wordpress。</p><p>WordPress没用过因此给不了具体评价，仅根据网上查询，是需要一个服务器的，相对来说自由，但是需要处理域名，服务器之类的东西，相对麻烦，有时间捣鼓就好了。hexo可直接部署到 GitHub 或者 gitee上，不用服务器，完全免费，也不用花费太多精力</p><p><a href="https://hexo.io/zh-cn/">hexo官网</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>hexo 和 WordPress 一样支持多个主题，在官网很明显的位置，点进去找到自己喜欢的</p><p><a href="https://hexo.io/themes/">hexo主题</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="网站框架-1"><a href="#网站框架-1" class="headerlink" title="网站框架"></a>网站框架</h2><p>根据官网文档一步一步看下去就好了，注意 node 和 npm 版本</p><blockquote><p>这里注意原本的项目所需的 node 版本和 hexo 所需的 node 版本是否一致，谨慎升级两者，否则会出现某个项目跑不起来</p><p>这里可以使用 nvm 对 node 多版本管理，项目的 node 版本可以看 npm或者node-sass的，在package.json里</p></blockquote><h2 id="主题-1"><a href="#主题-1" class="headerlink" title="主题"></a>主题</h2><p>根据相关的步骤直接装就好了，大部分都不会有问题，这里本博客采用的是 <a href="https://hexo.fluid-dev.com/docs/">hexo fluid</a></p><blockquote><p>在之前本来想用 next，很简洁，但是在根据某某文章的安装过程中，出现了网站访问人数无法确定，没有首页等问题，经过百度查询后并没有解决，只能更换主题，后找到了 fluid，仅需下载，简单配置就可直接使用，非常省事</p></blockquote><h1 id="相对路径图片测试"><a href="#相对路径图片测试" class="headerlink" title="相对路径图片测试"></a>相对路径图片测试</h1><p>hexo 默认解析网站的图片路径存在问题如下图</p><p>![截屏2023-10-29 14.02.29](images&#x2F;0-hexo-博客搭建.assets&#x2F;截屏2023-10-29 14.02.29.png)</p><p>解决办法：</p><ol><li>修改  _config.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-marked<br></code></pre></td></tr></table></figure><p>GitHub 地址    <a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a></p><p>修改 typora 配置</p><p><img src="/2023/10/27/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/0-hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231122162221646.png" alt="image-20231122162221646"></p><p>注意图片复制到同文件名的目录下，然后启动项目。如果能看到上面有张图片，说明成功了</p><p>多层目录不受影响</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>待续……</p>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>example</title>
    <link href="/2023/10/27/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/hexo-Front-matter/"/>
    <url>/2023/10/27/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF/hexo-Front-matter/</url>
    
    <content type="html"><![CDATA[<p>Hexo官网对于<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>的描述</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: example<br>category:<br><span class="hljs-bullet"> -</span> [算法, tttt]<br><span class="hljs-bullet"> -</span> [Java]<br><span class="hljs-bullet"> -</span> [Java2]<br>date: 2023-10-27 15:45:47<br>tags:<br><span class="hljs-bullet"> -</span> [test1, test3]<br><span class="hljs-bullet"> -</span> test2<br>description: 文章描述语法测试<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随便扯扯</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
